/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Usuarios;

import com.itextpdf.text.Image;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;
import empleados.ctrlempleado;
import static empleados.ctrlempleado.ruta_Imagen_Empleado;
import opticx1.Ventanaadmin;
import java.util.logging.Level;
import java.util.logging.Logger;
import opticx1.control_existencias;
import javax.swing.JOptionPane;
import opticx1.Conexionbd;
import javax.swing.ImageIcon;
import java.sql.*;
import javax.swing.Icon;
import javax.swing.table.DefaultTableModel;
import opticx1.login;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author LEO
 */
public class MenuUsuarios extends javax.swing.JFrame {

    control_existencias con = new control_existencias();
    String ele;

    public MenuUsuarios() throws Exception {
        initComponents();
        this.setLocationRelativeTo(null);
        setResizable(false);
        setTitle("Sistema de Gestion de Opticx Ópticas");
        chkEstatusUsuario.setText("USUARIO INACTIVO");
        AutoCompleteDecorator.decorate(cbxEmpleadoUsuario);
        mostrardatos("");
        Limpiar();
        tblUsuarios.setDefaultRenderer(Object.class, new FormatoTblUsuarios());
        try {

            Object[] llenar_combo_puesto = con.combox("empleados", "concat_ws(' ', empl_nomb, empl_apat,empl_amat)");

            cbxEmpleadoUsuario.removeAllItems();
            for (int i = 0; i < llenar_combo_puesto.length; i++) {

                cbxEmpleadoUsuario.addItem((String) llenar_combo_puesto[i]);

            }

            Object[] llenar_combo_genero = con.combox("nivelusuarios", "NUSU_NOMB");

            cbxUsuarioNivel.removeAllItems();
            cbxUsuarioNivel.addItem("SELECCIONA:");
            for (int i = 0; i < llenar_combo_genero.length; i++) {

                cbxUsuarioNivel.addItem((String) llenar_combo_genero[i]);

            }

            // txtnombrepro.setDocument(new Solo_mayusculas()); Ya ni me esta funcionando este metodo ya que al limitar caracteres,
            //afectaba a este metodo y regresaban a minusculas es decir nunca funcionaban juntos.
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "¡Error! no se ha podido acceder ala base de datos para rellenar las listas");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AgregarUsuario = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cbxUsuarioNivel = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        txtNameUser = new javax.swing.JTextField();
        txtPassUser = new javax.swing.JTextField();
        cbxEmpleadoUsuario = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        pnlChkEstatusUsuario = new javax.swing.JPanel();
        chkEstatusUsuario = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        lblIdUserUno = new javax.swing.JLabel();
        lblIdUserDos = new javax.swing.JLabel();
        btnGuardarUser = new javax.swing.JButton();
        btnUpdateUser = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsuarios = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        txtBuscaUsuario = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        AgregarUsuario.setType(java.awt.Window.Type.UTILITY);
        AgregarUsuario.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Elije empleado:");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel6.setText("Nombre de usuario:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel7.setText("Contraseña:");

        jLabel8.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel8.setText("Nivel de Usuario:");

        cbxUsuarioNivel.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cbxUsuarioNivel.setForeground(new java.awt.Color(0, 0, 153));
        cbxUsuarioNivel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxUsuarioNivel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxUsuarioNivelActionPerformed(evt);
            }
        });

        txtNameUser.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtNameUser.setForeground(new java.awt.Color(51, 0, 153));
        txtNameUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameUserActionPerformed(evt);
            }
        });

        txtPassUser.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtPassUser.setForeground(new java.awt.Color(51, 0, 153));

        cbxEmpleadoUsuario.setEditable(true);
        cbxEmpleadoUsuario.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cbxEmpleadoUsuario.setForeground(new java.awt.Color(0, 0, 153));
        cbxEmpleadoUsuario.setMaximumRowCount(500);
        cbxEmpleadoUsuario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxEmpleadoUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxEmpleadoUsuarioActionPerformed(evt);
            }
        });

        pnlChkEstatusUsuario.setBackground(new java.awt.Color(153, 0, 0));
        pnlChkEstatusUsuario.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        chkEstatusUsuario.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        chkEstatusUsuario.setForeground(new java.awt.Color(51, 51, 51));
        chkEstatusUsuario.setText("EMPLEADO ACTIVO");
        chkEstatusUsuario.setHideActionText(true);
        chkEstatusUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstatusUsuarioActionPerformed(evt);
            }
        });
        chkEstatusUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                chkEstatusUsuarioKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlChkEstatusUsuarioLayout = new javax.swing.GroupLayout(pnlChkEstatusUsuario);
        pnlChkEstatusUsuario.setLayout(pnlChkEstatusUsuarioLayout);
        pnlChkEstatusUsuarioLayout.setHorizontalGroup(
            pnlChkEstatusUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chkEstatusUsuario, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
        );
        pnlChkEstatusUsuarioLayout.setVerticalGroup(
            pnlChkEstatusUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chkEstatusUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jLabel9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel9.setText("Estatus de usuario:");

        lblIdUserUno.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblIdUserUno.setText("ID:");

        lblIdUserDos.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblIdUserDos.setText("ID");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator2)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(cbxUsuarioNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(pnlChkEstatusUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbxEmpleadoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(167, 167, 167)
                                .addComponent(jLabel7))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel6)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPassUser, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblIdUserUno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIdUserDos, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblIdUserUno)
                    .addComponent(lblIdUserDos))
                .addGap(22, 22, 22)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxEmpleadoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtNameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassUser, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(37, 37, 37)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(cbxUsuarioNivel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9))
                    .addComponent(pnlChkEstatusUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        AgregarUsuario.getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 700, 360));

        btnGuardarUser.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnGuardarUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/add1.png"))); // NOI18N
        btnGuardarUser.setMnemonic('G');
        btnGuardarUser.setText("GUARDAR");
        btnGuardarUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarUser.setIconTextGap(20);
        btnGuardarUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarUserActionPerformed(evt);
            }
        });
        AgregarUsuario.getContentPane().add(btnGuardarUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 400, 150, 60));

        btnUpdateUser.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnUpdateUser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/update1.png"))); // NOI18N
        btnUpdateUser.setMnemonic('A');
        btnUpdateUser.setText("ACTUALIZAR");
        btnUpdateUser.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdateUser.setIconTextGap(20);
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });
        AgregarUsuario.getContentPane().add(btnUpdateUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 400, 170, 60));

        jButton9.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/ATRAS.png"))); // NOI18N
        jButton9.setMnemonic('S');
        jButton9.setText("SALIR");
        jButton9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton9.setIconTextGap(20);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        AgregarUsuario.getContentPane().add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 400, 150, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONOS BOTONES/FONDOS/FONDO HISTORIA CLINICA4 170 X 725.png"))); // NOI18N
        jLabel2.setMaximumSize(new java.awt.Dimension(760, 520));
        jLabel2.setMinimumSize(new java.awt.Dimension(760, 520));
        jLabel2.setPreferredSize(new java.awt.Dimension(760, 520));
        AgregarUsuario.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 760, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(950, 465));
        setPreferredSize(new java.awt.Dimension(950, 465));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblUsuarios.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        tblUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(tblUsuarios);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 250, 860, 150));

        jButton1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/update1.png"))); // NOI18N
        jButton1.setText("ACTUALIZAR DATOS");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setIconTextGap(15);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, -1, 60));

        jButton4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/SALIR.png"))); // NOI18N
        jButton4.setText("ELIMINAR");
        jButton4.setIconTextGap(15);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 140, 60));

        jButton2.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/ATRAS.png"))); // NOI18N
        jButton2.setText("IR A MENÚ");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setIconTextGap(15);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 150, 60));

        jButton3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/eye.png"))); // NOI18N
        jButton3.setText("MOSTRAR USUARIOS");
        jButton3.setIconTextGap(20);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 160, 230, 70));

        txtBuscaUsuario.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtBuscaUsuario.setForeground(new java.awt.Color(0, 0, 153));
        txtBuscaUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscaUsuarioKeyReleased(evt);
            }
        });
        getContentPane().add(txtBuscaUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 180, 210, 40));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/limpiar.png"))); // NOI18N
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 180, 60, 40));

        jButton6.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Usuarios/Imagenes/botones/ALTA.png"))); // NOI18N
        jButton6.setText("AGREGAR NUEVO");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setIconTextGap(15);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, 180, 60));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("GESTIÓN DE USUARIOS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jLabel3)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 14, 350, -1));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Nombre del empleado:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 160, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONOS BOTONES/FONDOS/FONDO CTRL EMPLEADO.png"))); // NOI18N
        jLabel1.setMaximumSize(new java.awt.Dimension(950, 465));
        jLabel1.setMinimumSize(new java.awt.Dimension(950, 465));
        jLabel1.setOpaque(true);
        jLabel1.setPreferredSize(new java.awt.Dimension(950, 465));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 950, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Ventanaadmin v = null;
        try {
            v = new Ventanaadmin();
        } catch (Exception ex) {
            Logger.getLogger(Ventanaadmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        v.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbxUsuarioNivelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxUsuarioNivelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxUsuarioNivelActionPerformed

    private void cbxEmpleadoUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxEmpleadoUsuarioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxEmpleadoUsuarioActionPerformed

    private void txtNameUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameUserActionPerformed

    private void chkEstatusUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstatusUsuarioActionPerformed
        if (chkEstatusUsuario.isSelected() == true) {
            pnlChkEstatusUsuario.setBackground(new java.awt.Color(0, 204, 0));
            chkEstatusUsuario.setText("USUARIO ACTIVO");

        } else {
            pnlChkEstatusUsuario.setBackground(new java.awt.Color(153, 0, 0));
            chkEstatusUsuario.setText("USUARIO INACTIVO");
        }
    }//GEN-LAST:event_chkEstatusUsuarioActionPerformed

    private void chkEstatusUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkEstatusUsuarioKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_chkEstatusUsuarioKeyReleased

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        btnUpdateUser.setEnabled(false);
        AgregarUsuario.setModal(true);
        AgregarUsuario.setSize(760, 520);
        AgregarUsuario.setLocationRelativeTo(null);
        AgregarUsuario.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Limpiar();
        AgregarUsuario.dispose();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void btnGuardarUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarUserActionPerformed
        Conexionbd cc = new Conexionbd();
        java.sql.Connection cn = cc.conexion();
        String nom, pass, empl, nivel, valor;
        int emplId, nivelId, esta = 0;
        String sql, sqlcomparar = "";
        String sqlId = "";
        String sqlIdN = "";

        nom = txtNameUser.getText();
        if (nom.length() == 0) {
            String nl = System.getProperty("line.separator");
            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre de usuario");
            txtNameUser.requestFocus();
        } else {
            pass = txtPassUser.getText();
            if (pass.length() == 0) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno del empleado");
                txtPassUser.requestFocus();
            } else {
                empl = cbxEmpleadoUsuario.getSelectedItem().toString();
                System.out.println(empl);
                sqlId = "SELECT EMPL_ID FROM empleados WHERE concat_ws(' ', empl_nomb, empl_apat,empl_amat)='" + empl + "'";
                emplId = 0;
                String[] datosId = new String[1];
                try {
                    Statement stE = (Statement) cn.createStatement();
                    ResultSet rsE = stE.executeQuery(sqlId);
                    while (rsE.next()) {
                        datosId[0] = rsE.getString(1);

                        emplId = Integer.parseInt(datosId[0]);
                    }

                    System.out.println(emplId + " este ez el id del empleado");

                } catch (SQLException ex) {
                    Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println(ex);
                }

                if (cbxEmpleadoUsuario.getSelectedItem().equals("")) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el nombre del empleado");
                    cbxEmpleadoUsuario.requestFocus();
                } else {
                    nivel = cbxUsuarioNivel.getSelectedItem().toString();

                    sqlIdN = "SELECT NUSU_ID FROM nivelusuarios WHERE NUSU_NOMB='" + nivel + "'";
                    nivelId = 0;
                    String[] datosIdNivel = new String[1];
                    try {
                        Statement stN = (Statement) cn.createStatement();
                        ResultSet rsN = stN.executeQuery(sqlIdN);
                        while (rsN.next()) {
                            datosIdNivel[0] = rsN.getString(1);
                            nivelId = Integer.parseInt(datosIdNivel[0]);
                        }

                        System.out.println(nivelId + " este ez el id del nivel");

                    } catch (SQLException ex) {
                        Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println(ex);
                    }
                    if (cbxUsuarioNivel.getSelectedItem().equals("SELECCIONA:")) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el nivel de permisos");
                        cbxUsuarioNivel.requestFocus();

                    } else {
                        sqlcomparar = "SELECT USUA_NOMB FROM usuarios WHERE USUA_NOMB='" + nom + "'";
                        sql = "INSERT INTO usuarios (USUA_NOMB,USUA_PASS,USUA_NUSU_ID,USUA_EMPL_ID,USUA_ESTA_USUA_ID) VALUES (?,?,?,?,?)";
                        try {
                            String[] datosCompara = new String[1];

                            java.sql.Statement st = cn.createStatement();
                            ResultSet rs = st.executeQuery(sqlcomparar);
                            while (rs.next()) {
                                datosCompara[0] = rs.getString(1);
                            }
                            valor = datosCompara[0];

                            System.out.println(valor + " valor obtenido");
                            System.out.println(nom);
                            if (valor != null) {
                                JOptionPane.showMessageDialog(null, "¡Error! el nombre de usuario ya existe", "About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\Usuarios\\Imagenes\\botones\\Cancel.png"));
                            } else {
                                String[] datos = new String[7];
                                if (datos[0] == null) {
                                    try {
                                        PreparedStatement pst = (PreparedStatement) cn.prepareStatement(sql);
                                        pst.setString(1, nom);
                                        pst.setString(2, pass);
                                        pst.setString(3, Integer.toString(nivelId));
                                        pst.setString(4, Integer.toString(emplId));

                                        if (chkEstatusUsuario.isSelected()) {

                                            esta = 1;
                                        } else {
                                            esta = 2;
                                            pnlChkEstatusUsuario.setBackground(new java.awt.Color(204, 0, 0));
                                        }
                                        if (esta == 2) {
                                            JOptionPane.showMessageDialog(null, "Ha dejado el empleado en su estatus inactivo");
                                        }

                                        pst.setString(5, Integer.toString(esta));

                                        int n = pst.executeUpdate();

                                        if (n > 0) {
                                            JOptionPane.showMessageDialog(null, "Registro guardado con éxito", "About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                            mostrardatosPorUsuario(txtNameUser.getText());
                                            Limpiar();

                                        } else {
                                            JOptionPane.showMessageDialog(null, "¡Error! no se pudo guardar el registro");

                                        }

                                    } catch (Exception e) {
                                        JOptionPane.showMessageDialog(null, e + " ¡Error! no ha sido posible conectar ala base de datos");
                                        System.out.println(e);
                                    }

                                } else {

                                }

                            }
                        } catch (Exception e) {

                            String nl = System.getProperty("line.separator");
                            JOptionPane.showMessageDialog(null, "¡Error! no ha sido posible conectar ala base de datos");
                            System.out.println(e);
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardarUserActionPerformed

    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed
        Conexionbd cc = new Conexionbd();
        java.sql.Connection cn = cc.conexion();
        String nom, pass, empl, nivel, valor;
        int emplId, nivelId, esta = 0;
        String sql, sqlcomparar = "";
        String sqlId = "";
        String sqlIdN = "";

        nom = txtNameUser.getText();
        if (nom.length() == 0) {
            String nl = System.getProperty("line.separator");
            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre de usuario");
            txtNameUser.requestFocus();
        } else {
            pass = txtPassUser.getText();
            if (pass.length() == 0) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno del empleado");
                txtPassUser.requestFocus();
            } else {
                empl = cbxEmpleadoUsuario.getSelectedItem().toString();
                System.out.println(empl);
                sqlId = "SELECT EMPL_ID FROM empleados WHERE concat_ws(' ', empl_nomb, empl_apat,empl_amat)='" + empl + "'";
                emplId = 0;
                String[] datosId = new String[1];
                try {
                    Statement stE = (Statement) cn.createStatement();
                    ResultSet rsE = stE.executeQuery(sqlId);
                    while (rsE.next()) {
                        datosId[0] = rsE.getString(1);

                        emplId = Integer.parseInt(datosId[0]);
                    }

                    System.out.println(emplId + " este ez el id del empleado");

                } catch (SQLException ex) {
                    Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println(ex);
                }

                if (cbxEmpleadoUsuario.getSelectedItem().equals("")) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el nombre del empleado");
                    cbxEmpleadoUsuario.requestFocus();
                } else {
                    nivel = cbxUsuarioNivel.getSelectedItem().toString();

                    sqlIdN = "SELECT NUSU_ID FROM nivelusuarios WHERE NUSU_NOMB='" + nivel + "'";
                    nivelId = 0;
                    String[] datosIdNivel = new String[1];
                    try {
                        Statement stN = (Statement) cn.createStatement();
                        ResultSet rsN = stN.executeQuery(sqlIdN);
                        while (rsN.next()) {
                            datosIdNivel[0] = rsN.getString(1);
                            nivelId = Integer.parseInt(datosIdNivel[0]);
                        }

                        System.out.println(nivelId + " este ez el id del nivel");

                    } catch (SQLException ex) {
                        Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                        System.out.println(ex);
                    }
                    if (cbxUsuarioNivel.getSelectedItem().equals("SELECCIONA:")) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el nivel de permisos");
                        cbxUsuarioNivel.requestFocus();

                    } else {
                        sqlcomparar = "SELECT USUA_NOMB FROM usuarios WHERE USUA_NOMB='" + nom + "'";
                        try {
                            String[] datosCompara = new String[1];

                            java.sql.Statement st = cn.createStatement();
                            ResultSet rs = st.executeQuery(sqlcomparar);
                            while (rs.next()) {
                                datosCompara[0] = rs.getString(1);
                            }
                            valor = datosCompara[0];

                            System.out.println(valor + " valor obtenido");
                            System.out.println(nom);
                            if (valor != null) {
                                int dato = JOptionPane.showConfirmDialog(null, login.Guardausuario + "  ¿Desea sobreescribir el nombre de usuario?", "Alerta!", JOptionPane.YES_NO_OPTION);
                                if (dato == 0) {

                                    if (chkEstatusUsuario.isSelected()) {

                                        esta = 1;
                                    } else {
                                        esta = 2;
                                        pnlChkEstatusUsuario.setBackground(new java.awt.Color(204, 0, 0));
                                    }
                                    if (esta == 2) {
                                        JOptionPane.showMessageDialog(null, "Ha dejado el empleado en su estatus inactivo");
                                    }

                                    PreparedStatement pst;
                                    pst = (PreparedStatement) cn.prepareStatement("UPDATE usuarios SET USUA_NOMB='" + nom + "',USUA_PASS='" + pass + "',USUA_NUSU_ID='" + cbxUsuarioNivel.getSelectedIndex() + "',USUA_EMPL_ID='" + emplId + "',USUA_ESTA_USUA_ID='" + esta + "' WHERE USUA_ID='" + lblIdUserDos.getText() + "'");
                                    int n = pst.executeUpdate();
                                    if (n > 0) {

                                        JOptionPane.showMessageDialog(null, "Registro modificado con éxito", "About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                        Limpiar();
                                        btnGuardarUser.setEnabled(true);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "¡Error! no se pudo guardar el registro");

                                    }
                                }
                            } else {
                                if (chkEstatusUsuario.isSelected()) {

                                    esta = 1;
                                } else {
                                    esta = 2;
                                    pnlChkEstatusUsuario.setBackground(new java.awt.Color(204, 0, 0));
                                }
                                if (esta == 2) {
                                    JOptionPane.showMessageDialog(null, "Ha dejado el empleado en su estatus inactivo");
                                }

                                PreparedStatement pst;
                                pst = (PreparedStatement) cn.prepareStatement("UPDATE usuarios SET USUA_NOMB='" + nom + "',USUA_PASS='" + pass + "',USUA_NUSU_ID='" + cbxUsuarioNivel.getSelectedIndex() + "',USUA_EMPL_ID='" + emplId + "',USUA_ESTA_USUA_ID='" + esta + "' WHERE USUA_ID='" + lblIdUserDos.getText() + "'");
                                int n = pst.executeUpdate();
                                if (n > 0) {

                                    JOptionPane.showMessageDialog(null, "Registro modificado con éxito", "About", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                    Limpiar();
                                    btnGuardarUser.setEnabled(true);
                                } else {
                                    JOptionPane.showMessageDialog(null, "¡Error! no se pudo guardar el registro");

                                }
                            }

                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e + " ¡Error! no ha sido posible conectar ala base de datos");
                            System.out.println(e);
                        }

                    }
                }
            }
        }

        try {
            mostrardatosPorId(ele);
            System.out.println(ele + "----------------------------------------");

        } catch (Exception ex) {
            Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void txtBuscaUsuarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscaUsuarioKeyReleased
        String nombre;

        if (this.txtBuscaUsuario != null) {

            nombre = txtBuscaUsuario.getText().toString();
            try {
                mostrardatos(nombre);
            } catch (Exception ex) {
                Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_txtBuscaUsuarioKeyReleased

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            mostrardatos("");
        } catch (Exception ex) {
            Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        txtBuscaUsuario.setText("");
        try {
            mostrardatos("");
        } catch (Exception ex) {
            Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
        txtBuscaUsuario.requestFocus();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        lblIdUserDos.setVisible(true);
        lblIdUserUno.setVisible(true);
        btnUpdateUser.setEnabled(true);
        btnGuardarUser.setEnabled(false);
        modificar();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Conexionbd cc = null;
        try {
            cc = new Conexionbd();
        } catch (Exception ex) {
            Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            int fila = tblUsuarios.getSelectedRow();
            String id = "";
            id = tblUsuarios.getValueAt(fila, 0).toString();
            java.sql.Connection cn = cc.conexion();
            int dato = JOptionPane.showConfirmDialog(null, login.Guardausuario + "  ¿Estas seguro de eliminar este registro?", "Alerta!", JOptionPane.YES_NO_OPTION);
            if (dato == 0) {
                try {
                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM usuarios WHERE USUA_ID='" + id + "'");
                    pst.executeUpdate();
                    mostrardatos("");
                } catch (Exception e) {
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "¡Error! no ha seleccionado ningun ID de la lista de abajo");

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MenuUsuarios().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(MenuUsuarios.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog AgregarUsuario;
    private javax.swing.JButton btnGuardarUser;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JComboBox<String> cbxEmpleadoUsuario;
    private javax.swing.JComboBox<String> cbxUsuarioNivel;
    private javax.swing.JCheckBox chkEstatusUsuario;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblIdUserDos;
    private javax.swing.JLabel lblIdUserUno;
    private javax.swing.JPanel pnlChkEstatusUsuario;
    private javax.swing.JTable tblUsuarios;
    private javax.swing.JTextField txtBuscaUsuario;
    private javax.swing.JTextField txtNameUser;
    private javax.swing.JTextField txtPassUser;
    // End of variables declaration//GEN-END:variables
   void Limpiar() {
        cbxEmpleadoUsuario.setSelectedIndex(-1);
        txtNameUser.setText("");
        txtPassUser.setText("");
        cbxUsuarioNivel.setSelectedIndex(0);
        chkEstatusUsuario.setSelected(false);
        chkEstatusUsuario.setText("USUARIO INACTIVO");
        pnlChkEstatusUsuario.setBackground(new java.awt.Color(204, 0, 0));
        lblIdUserDos.setVisible(false);
        lblIdUserUno.setVisible(false);
    }

    void mostrardatosPorId(String valor) throws Exception {
        DefaultTableModel modelo = new DefaultTableModel();
        int[] anchos = {0, 50, 40, 130, 40, 20};
        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE DE USUARIO");
        modelo.addColumn("CONTRASEÑA");
        modelo.addColumn("EMPLEADO");
        modelo.addColumn("NIVEL DE USUARIO");
        modelo.addColumn("ESTATUS");
        tblUsuarios.setModel(modelo);
        for (int i = 0; i < tblUsuarios.getColumnCount(); i++) {
            tblUsuarios.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String sql = "";
        if (valor.equals("")) {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID";
            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);

                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        } else {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID WHERE USUA_ID='" + valor + "'";

            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);
                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        }
    }

    void mostrardatos(String valor) throws Exception {
        DefaultTableModel modelo = new DefaultTableModel();
        int[] anchos = {0, 50, 40, 130, 40, 20};
        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE DE USUARIO");
        modelo.addColumn("CONTRASEÑA");
        modelo.addColumn("EMPLEADO");
        modelo.addColumn("NIVEL DE USUARIO");
        modelo.addColumn("ESTATUS");
        tblUsuarios.setModel(modelo);
        for (int i = 0; i < tblUsuarios.getColumnCount(); i++) {
            tblUsuarios.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String sql = "";
        if (valor.equals("")) {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID";
            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);

                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        } else {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID WHERE EMPL_NOMB LIKE '%" + valor + "%'";

            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);
                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        }
    }

    public void modificar() {
        int fila = tblUsuarios.getSelectedRow();
        int columna = tblUsuarios.getSelectedRow();
        if (fila >= 0) {
            if (tblUsuarios.getValueAt(fila, columna) == null) {
                JOptionPane.showMessageDialog(null, "¡La fila que seleccionó esta vacía!");
            } else if (fila >= 0 && columna >= 0) {
                ele = tblUsuarios.getValueAt(fila, 0).toString();
                lblIdUserDos.setText(tblUsuarios.getValueAt(fila, 0).toString());
                txtNameUser.setText(tblUsuarios.getValueAt(fila, 1).toString());
                txtPassUser.setText(tblUsuarios.getValueAt(fila, 2).toString());
                cbxEmpleadoUsuario.setSelectedItem(tblUsuarios.getValueAt(fila, 3).toString());
                cbxUsuarioNivel.setSelectedItem(tblUsuarios.getValueAt(fila, 4).toString());
                String chkEleccion = tblUsuarios.getValueAt(fila, 5).toString();
                if (chkEleccion.equals("ACTIVO")) {
                    chkEstatusUsuario.setSelected(true);
                    chkEstatusUsuario.setText("USUARIO ACTIVO");
                    pnlChkEstatusUsuario.setBackground(new java.awt.Color(0, 204, 0));

                } else {
                    chkEstatusUsuario.setSelected(false);
                    chkEstatusUsuario.setText("USUARIO INACTIVO");
                    pnlChkEstatusUsuario.setBackground(new java.awt.Color(204, 0, 0));
                }

                AgregarUsuario.setModal(true);
                AgregarUsuario.setSize(760, 520);
                AgregarUsuario.setLocationRelativeTo(null);
                AgregarUsuario.setVisible(true);

            }

        } else {

            JOptionPane.showMessageDialog(null, "¡No selecionó ninguna fila!");
        }
    }

    void mostrardatosPorUsuario(String valor) throws Exception {
        DefaultTableModel modelo = new DefaultTableModel();
        int[] anchos = {0, 50, 40, 130, 40, 20};
        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE DE USUARIO");
        modelo.addColumn("CONTRASEÑA");
        modelo.addColumn("EMPLEADO");
        modelo.addColumn("NIVEL DE USUARIO");
        modelo.addColumn("ESTATUS");
        tblUsuarios.setModel(modelo);
        for (int i = 0; i < tblUsuarios.getColumnCount(); i++) {
            tblUsuarios.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        String sql = "";
        if (valor.equals("")) {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID";
            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);

                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        } else {
            sql = "SELECT USUA_ID, USUA_NOMB, USUA_PASS, concat_ws(' ', empl_nomb, empl_apat,empl_amat), NUSU_NOMB, ESTA_USUA_NOMB"
                    + " FROM empleados INNER JOIN usuarios INNER JOIN nivelusuarios INNER JOIN estatus_usuarios"
                    + " ON USUA_EMPL_ID=EMPL_ID AND USUA_NUSU_ID=NUSU_ID AND USUA_ESTA_USUA_ID=ESTA_USUA_ID WHERE USUA_NOMB='" + valor + "'";

            String[] datos = new String[6];
            try {
                Conexionbd cc = new Conexionbd();
                java.sql.Connection cn = cc.conexion();
                java.sql.Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    datos[0] = rs.getString(1);
                    datos[1] = rs.getString(2);
                    datos[2] = rs.getString(3);
                    datos[3] = rs.getString(4);
                    datos[4] = rs.getString(5);
                    datos[5] = rs.getString(6);

                    modelo.addRow(datos);
                }
                tblUsuarios.setModel(modelo);
                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(ctrlempleado.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
            }
        }
    }
}
