/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pacientes;

import Clientes.Clientes;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import opticx1.Conexionbd;

/**
 *
 * @author LEO
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bu = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jButton3.setText("jButton3");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BuLayout = new javax.swing.GroupLayout(Bu.getContentPane());
        Bu.getContentPane().setLayout(BuLayout);
        BuLayout.setHorizontalGroup(
            BuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(146, 146, 146))
        );
        BuLayout.setVerticalGroup(
            BuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuLayout.createSequentialGroup()
                .addGroup(BuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BuLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jButton3)))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setText("jButton4");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("jButton5");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 25, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jButton5)
                .addGap(59, 59, 59)
                .addComponent(jButton1)
                .addGap(48, 48, 48)
                .addComponent(jButton2)
                .addGap(40, 40, 40)
                .addComponent(jButton4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       String tomarfecha;
        int[] anchos = {10, 10, 60, 60, 120};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("ID DEL PACIENTE");
        modelo.addColumn("FECHA DE CAPTURA");
        modelo.addColumn("ULTIMA MODIFICACIÃ“N");
        modelo.addColumn("OBSERVACIONES");
        tbl.setModel(modelo);
        for (int i = 0; i < tbl.getColumnCount(); i++) {
            tbl.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int valor = 88;
        String sql = "SELECT EXAM_ID, EXAM_PACI_ID, EXAM_FECH, EXAM_ULTI_MODI, EXAM_OBSE FROM EXAMEN_PACIENTE WHERE EXAM_PACI_ID='" + valor + "'";
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            if (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                tomarfecha = rs.getString(3);
                Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                int hora, minutos, segundos;
                hora =calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                System.out.println("Entrada->" + tomarfecha+" "+hora+":"+minutos);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha+" "+hora+":"+minutos);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                datos[2] = salida;
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);

                modelo.addRow(datos);
                
                
//                BuscarExamen.setModal(true);
//                BuscarExamen.setSize(750, 266);
//                BuscarExamen.setLocationRelativeTo(null);
//                BuscarExamen.setVisible(true);
//                
            }
//            } if(rs.equals(0)) {
//                JOptionPane.showMessageDialog(null, "No se han realizado examenes para este paciente");
//            }
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       String tomarfecha;
        int[] anchos = {10, 10, 60, 60, 120};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("ID DEL PACIENTE");
        modelo.addColumn("FECHA DE CAPTURA");
        modelo.addColumn("ULTIMA MODIFICACIÃ“N");
        modelo.addColumn("OBSERVACIONES");
        jTable1.setModel(modelo);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int valor = 88;
        String sql = "SELECT EXAM_ID, EXAM_PACI_ID, EXAM_FECH, EXAM_ULTI_MODI, EXAM_OBSE FROM EXAMEN_PACIENTE WHERE EXAM_PACI_ID='" + valor + "'";
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                tomarfecha = rs.getString(3);
                Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                int hora, minutos, segundos;
                hora =calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                System.out.println("Entrada->" + tomarfecha+" "+hora+":"+minutos);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha+" "+hora+":"+minutos);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                datos[2] = salida;
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);

                modelo.addRow(datos);
                
                
//                BuscarExamen.setModal(true);
//                BuscarExamen.setSize(750, 266);
//                BuscarExamen.setLocationRelativeTo(null);
//                BuscarExamen.setVisible(true);
//                
            }
//            } if(rs.equals(0)) {
//                JOptionPane.showMessageDialog(null, "No se han realizado examenes para este paciente");
//            }
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Bu.setModal(true);
               Bu.setSize(750, 266);
               Bu.setLocationRelativeTo(null);
               Bu.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         String tomarfecha;
        int[] anchos = {10, 10, 60, 60, 120};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("ID DEL PACIENTE");
        modelo.addColumn("FECHA DE CAPTURA");
        modelo.addColumn("ULTIMA MODIFICACIÃ“N");
        modelo.addColumn("OBSERVACIONES");
        jTable1.setModel(modelo);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int valor = 88;
        String sql = "SELECT EXAM_ID, EXAM_PACI_ID, EXAM_FECH, EXAM_ULTI_MODI, EXAM_OBSE FROM EXAMEN_PACIENTE WHERE EXAM_PACI_ID='" + valor + "'";
        String[] datos = new String[6];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                tomarfecha = rs.getString(3);
                System.out.println("Entrada->" + tomarfecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                datos[2] = salida;
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);

                modelo.addRow(datos);
                
                
                Bu.setModal(true);
             Bu.setSize(750, 266);
               Bu.setLocationRelativeTo(null);
               Bu.setVisible(true);
               
            }
//            } if(rs.equals(0)) {
//                JOptionPane.showMessageDialog(null, "No se han realizado examenes para este paciente");
//            }
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
        
                             
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
          String tomarfecha;
        int[] anchos = {10, 10, 60, 60, 120};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("ID DEL PACIENTE");
        modelo.addColumn("FECHA DE CAPTURA");
        modelo.addColumn("ULTIMA MODIFICACIÃ“N");
        modelo.addColumn("OBSERVACIONES");
        jTable1.setModel(modelo);
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int valor = 88;
        String sql = "SELECT EXAM_ID, EXAM_PACI_ID, EXAM_FECH, EXAM_ULTI_MODI, EXAM_OBSE FROM EXAMEN_PACIENTE WHERE EXAM_PACI_ID='" + valor + "'";
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                tomarfecha = rs.getString(3);
                Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                int hora, minutos, segundos;
                hora =calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                System.out.println("Entrada->" + tomarfecha+" "+hora+":"+minutos);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha+" "+hora+":"+minutos);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                datos[2] = salida;
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);

                modelo.addRow(datos);
                
                
                Bu.setModal(true);
             Bu.setSize(750, 266);
               Bu.setLocationRelativeTo(null);
               Bu.setVisible(true);
               
            }
//            } if(rs.equals(0)) {
//                JOptionPane.showMessageDialog(null, "No se han realizado examenes para este paciente");
//            }
            cn.close();
        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_jButton5MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Bu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tbl;
    // End of variables declaration//GEN-END:variables
}
