/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Pacientes;

import Atxy2k.CustomTextField.RestrictedTextField;
import Clientes.Clientes;
import static Clientes.Clientes.AgregarCliente;
import static Clientes.Clientes.btnActualizar;
import static Clientes.Clientes.btnGuardarEmpleado;
import static Clientes.Clientes.lblCategoriaCliente;
import static Clientes.Clientes.lblFechaCliente;
import com.sun.awt.AWTUtilities;
import java.awt.Color;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import opticx1.Cargar_splash;
import opticx1.Conexionbd;
import opticx1.VentanaUsuario;
import static opticx1.VentanaUsuario.invi;
import opticx1.Ventanaadmin;
import opticx1.control_existencias;
import opticx1.login;
import static opticx1.login.invitado;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import validaciones.solo_numeros;

/**
 *
 * @author LEO
 */
public class Historia_clinica extends javax.swing.JFrame {

    control_existencias con = new control_existencias();

    double i = 50, j = 1;
    Cargar_splash hilo;
    String usuario;

    public Historia_clinica() {
        initComponents();
        //iniciar();
        String formato = "dd/MM/yyyy";
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        SimpleDateFormat f = new SimpleDateFormat("EEEE", new Locale("ES"));
        String nombreDia = f.format(date);
        String fechafin = sdf.format(date);
        lblHoy.setText(fechafin);
        lblHoy1.setText(nombreDia);
        btnAgregar.requestFocus();
        usuario = login.Guardausuario;
        if (usuario == null) {
            lblUsuario.setText("Ninguno");
        } else {
            lblUsuario.setText(usuario);
        }
        try {
            Object[] llenar_combo_genero = con.combox("sexo", "SEXO_NOMB");
            cbxGenero.removeAllItems();
            cbxGenero.addItem("SELECCIONA:");
            for (int i = 0; i < llenar_combo_genero.length; i++) {

                cbxGenero.addItem((String) llenar_combo_genero[i]);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "¡Error! no se ha podido acceder ala base de datos para cargar la lista de sexo");
        }
        try {
                        Object[] combo_llenar_categoria = con.combox("CATEGORIA_PACIENTE", "CATE_NOMB");
                        cbxCategoriaPaciente.removeAllItems();
                        cbxCategoriaPaciente.addItem("--Selecciona--");
                        for (int i = 0; i < combo_llenar_categoria.length; i++) {
                            cbxCategoriaPaciente.addItem((String) combo_llenar_categoria[i]);
                        }
                    } catch (Exception e) {
                       JOptionPane.showMessageDialog(null, "¡Error! no se ha podido acceder ala base de datos para cargar la lista de categoría");
                        }
        Validar();
        CargarUltimoIdExamenPaciente();
        btnExtender.setVisible(false);
        lblIdAgudezaVisual.setVisible(false);
        PaginaExamenVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgVisionLejana = new javax.swing.ButtonGroup();
        bgVisionBorrosa = new javax.swing.ButtonGroup();
        bgVisionCercana = new javax.swing.ButtonGroup();
        bgFotofobia = new javax.swing.ButtonGroup();
        bgParpadeos = new javax.swing.ButtonGroup();
        bgPantalleo = new javax.swing.ButtonGroup();
        bgMiosis = new javax.swing.ButtonGroup();
        AgregarCliente = new javax.swing.JDialog();
        jPanel21 = new javax.swing.JPanel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        txtPaterno = new javax.swing.JTextField();
        txtMaterno = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        jLabel56 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        txtDire = new javax.swing.JTextField();
        txtTele = new javax.swing.JTextField();
        cbxGenero = new javax.swing.JComboBox<String>();
        jLabel66 = new javax.swing.JLabel();
        txtMail = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtTeleCasa = new javax.swing.JTextField();
        txtEdad = new javax.swing.JTextField();
        jLabel71 = new javax.swing.JLabel();
        pnlImag = new javax.swing.JPanel();
        chkEsta = new javax.swing.JCheckBox();
        lblEstatusCliente = new javax.swing.JLabel();
        txtOcupacion = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        lblTituloCliente = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnGuardarPaciente = new javax.swing.JButton();
        lblId = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jLabel73 = new javax.swing.JLabel();
        lblIdNomb = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        jlabelCategoria1 = new javax.swing.JLabel();
        lblCategoriaCliente = new javax.swing.JLabel();
        cbxCategoriaPaciente = new javax.swing.JComboBox();
        jLabel74 = new javax.swing.JLabel();
        NuevaVenta = new javax.swing.JDialog();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jLabel57 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        cbLejosOD1 = new javax.swing.JComboBox<String>();
        cbLejosOI1 = new javax.swing.JComboBox<String>();
        cbLejosAO1 = new javax.swing.JComboBox<String>();
        jLabel77 = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        jLabel78 = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        cbAgujeroOD1 = new javax.swing.JComboBox<String>();
        cbAgujeroOI1 = new javax.swing.JComboBox<String>();
        cbAgujeroAO1 = new javax.swing.JComboBox<String>();
        jPanel29 = new javax.swing.JPanel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        cbRXAnteriorOD1 = new javax.swing.JComboBox<String>();
        cbRXAnteriorOI1 = new javax.swing.JComboBox<String>();
        cbRXAnteriorAO1 = new javax.swing.JComboBox<String>();
        jPanel30 = new javax.swing.JPanel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        cbAVRXAnteriorOD1 = new javax.swing.JComboBox<String>();
        cbAVRXAnteriorOI1 = new javax.swing.JComboBox<String>();
        cbAVRXAnteriorAO1 = new javax.swing.JComboBox<String>();
        jPanel31 = new javax.swing.JPanel();
        jLabel87 = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabel92 = new javax.swing.JLabel();
        jLabel93 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        txtEsferaOD1 = new javax.swing.JTextField();
        txtEsferaOI1 = new javax.swing.JTextField();
        txtCilindroOD1 = new javax.swing.JTextField();
        txtCilindroOI1 = new javax.swing.JTextField();
        txtEjeOI1 = new javax.swing.JTextField();
        txtEjeOD1 = new javax.swing.JTextField();
        txtADDOD1 = new javax.swing.JTextField();
        txtADDOI1 = new javax.swing.JTextField();
        txtPrismaOD1 = new javax.swing.JTextField();
        txtPrismaOI1 = new javax.swing.JTextField();
        cbPocisionOI1 = new javax.swing.JComboBox<String>();
        cbPocisionOD1 = new javax.swing.JComboBox<String>();
        jLabel94 = new javax.swing.JLabel();
        jLabel95 = new javax.swing.JLabel();
        jLabel96 = new javax.swing.JLabel();
        jLabel97 = new javax.swing.JLabel();
        jLabel98 = new javax.swing.JLabel();
        jLabel99 = new javax.swing.JLabel();
        jLabel100 = new javax.swing.JLabel();
        jLabel101 = new javax.swing.JLabel();
        jLabel102 = new javax.swing.JLabel();
        Barra = new javax.swing.JDialog();
        Progreso = new javax.swing.JProgressBar();
        estados = new javax.swing.JLabel();
        Alerta_Guardar = new javax.swing.JDialog();
        jp1 = new javax.swing.JPanel();
        jp2 = new javax.swing.JPanel();
        jp3 = new javax.swing.JPanel();
        jp4 = new javax.swing.JPanel();
        jp5 = new javax.swing.JPanel();
        jp6 = new javax.swing.JPanel();
        jp7 = new javax.swing.JPanel();
        jp8 = new javax.swing.JPanel();
        jp9 = new javax.swing.JPanel();
        jp10 = new javax.swing.JPanel();
        jLabel104 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel105 = new javax.swing.JLabel();
        BuscarPaciente = new javax.swing.JDialog();
        cbxBuscarPaciente = new javax.swing.JComboBox();
        btnColocarPaciente = new javax.swing.JButton();
        btnVerExamen = new javax.swing.JButton();
        jLabel107 = new javax.swing.JLabel();
        lblCelularColocar = new javax.swing.JLabel();
        lblCelularNombre = new javax.swing.JLabel();
        lblDireccionColocar = new javax.swing.JLabel();
        lblDireccionNombre = new javax.swing.JLabel();
        lblFechaDeRegistro = new javax.swing.JLabel();
        jLabel108 = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        lblIdColocar = new javax.swing.JLabel();
        jLabel103 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel106 = new javax.swing.JLabel();
        BuscarExamen = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblExamenVisual = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel109 = new javax.swing.JLabel();
        lblNombreCompleto = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        chkDiabetes = new javax.swing.JCheckBox();
        chkHipertension = new javax.swing.JCheckBox();
        chkMigraña = new javax.swing.JCheckBox();
        chkEmbarazo = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        rbVisionLejanaBuena = new javax.swing.JRadioButton();
        rbVisionLejanaMala = new javax.swing.JRadioButton();
        jLabel19 = new javax.swing.JLabel();
        rbVisionBorrosaSi = new javax.swing.JRadioButton();
        rbVisionBorrosaNo = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        rbVisionCercanaBuena = new javax.swing.JRadioButton();
        rbVisionCercanaMala = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        rbFotofobiaSi = new javax.swing.JRadioButton();
        rbFotofobiaNo = new javax.swing.JRadioButton();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblIdPaciente = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombreExamen = new javax.swing.JTextField();
        txtDireccionExamen = new javax.swing.JTextField();
        txtOcupacionExamen = new javax.swing.JTextField();
        txtFechaExamen = new javax.swing.JTextField();
        txtTelCasaExamen = new javax.swing.JTextField();
        txtTelCelExamen = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtMailExamen = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtSexoExamen = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        txtEdadExamen = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        rbParpadeosRegular = new javax.swing.JRadioButton();
        rbParpadeosMalo = new javax.swing.JRadioButton();
        rbPantalleoBueno = new javax.swing.JRadioButton();
        rbPantalleoRegular = new javax.swing.JRadioButton();
        rbPantalleoMalo = new javax.swing.JRadioButton();
        rbMiosisBueno = new javax.swing.JRadioButton();
        rbMiosisRegular = new javax.swing.JRadioButton();
        rbMiosisMalo = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        rbParpadeosBueno = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        cbLejosOD = new javax.swing.JComboBox<String>();
        cbLejosOI = new javax.swing.JComboBox<String>();
        cbLejosAO = new javax.swing.JComboBox<String>();
        jLabel27 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        cbAgujeroOD = new javax.swing.JComboBox<String>();
        cbAgujeroOI = new javax.swing.JComboBox<String>();
        cbAgujeroAO = new javax.swing.JComboBox<String>();
        jPanel14 = new javax.swing.JPanel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        cbRXAnteriorOD = new javax.swing.JComboBox<String>();
        cbRXAnteriorOI = new javax.swing.JComboBox<String>();
        cbRXAnteriorAO = new javax.swing.JComboBox<String>();
        jPanel16 = new javax.swing.JPanel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        cbAVRXAnteriorOD = new javax.swing.JComboBox<String>();
        cbAVRXAnteriorOI = new javax.swing.JComboBox<String>();
        cbAVRXAnteriorAO = new javax.swing.JComboBox<String>();
        jPanel17 = new javax.swing.JPanel();
        jLabel55 = new javax.swing.JLabel();
        jLabel58 = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        jLabel63 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        txtEsferaOD = new javax.swing.JTextField();
        txtEsferaOI = new javax.swing.JTextField();
        txtCilindroOD = new javax.swing.JTextField();
        txtCilindroOI = new javax.swing.JTextField();
        txtEjeOI = new javax.swing.JTextField();
        txtEjeOD = new javax.swing.JTextField();
        txtADDOD = new javax.swing.JTextField();
        txtADDOI = new javax.swing.JTextField();
        txtPrismaOD = new javax.swing.JTextField();
        txtPrismaOI = new javax.swing.JTextField();
        cbPocisionOI = new javax.swing.JComboBox<String>();
        cbPocisionOD = new javax.swing.JComboBox<String>();
        jLabel64 = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        btnGuardarExamenVisual = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        clockFace1 = new org.edisoncor.gui.varios.ClockFace();
        jPanel19 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        lblHoy = new javax.swing.JLabel();
        lblHoy1 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jLabel49 = new javax.swing.JLabel();
        lblExamenVisual = new javax.swing.JLabel();
        btnExtender = new javax.swing.JButton();
        lblIdAgudezaVisual = new javax.swing.JLabel();
        btnBuscarPacientes = new javax.swing.JButton();
        btnTodosPacientes = new javax.swing.JButton();
        jPanel32 = new javax.swing.JPanel();
        lblUsuario = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnModificar = new javax.swing.JButton();
        btnLimpiarTodo = new javax.swing.JButton();
        lblUnode = new javax.swing.JLabel();
        lblDe = new javax.swing.JLabel();
        lblNumero = new javax.swing.JLabel();
        btnNextExamen = new javax.swing.JButton();
        btnAnteriorExamen = new javax.swing.JButton();
        pnlFechaExamen = new javax.swing.JPanel();
        lblFechaExamen = new javax.swing.JLabel();
        pnlUltimaModificacion = new javax.swing.JPanel();
        lblUltimaModificacion = new javax.swing.JLabel();
        lblBacKground = new javax.swing.JLabel();

        AgregarCliente.setMinimumSize(new java.awt.Dimension(1030, 543));
        AgregarCliente.setType(java.awt.Window.Type.UTILITY);
        AgregarCliente.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel50.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel50.setText(" NOMBRE:");

        jLabel51.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel51.setText("APELLIDO PATERNO:");

        jLabel52.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel52.setText("APELLIDO MATERNO:");

        txtPaterno.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtPaterno.setForeground(new java.awt.Color(0, 0, 153));
        txtPaterno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPaternoKeyReleased(evt);
            }
        });

        txtMaterno.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtMaterno.setForeground(new java.awt.Color(0, 0, 153));
        txtMaterno.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMaternoKeyReleased(evt);
            }
        });

        jLabel53.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel53.setText("CORREO ELECTRÓNICO:");

        jLabel54.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel54.setText("TELEFONO DE CASA:");

        jLabel56.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel56.setText("DIRECCIÓN:");

        jLabel65.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel65.setText("GENERO:");

        txtDire.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtDire.setForeground(new java.awt.Color(0, 0, 153));
        txtDire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireActionPerformed(evt);
            }
        });

        txtTele.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtTele.setForeground(new java.awt.Color(0, 0, 153));
        txtTele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeleActionPerformed(evt);
            }
        });

        cbxGenero.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        cbxGenero.setForeground(new java.awt.Color(0, 51, 153));
        cbxGenero.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));

        jLabel66.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel66.setText("TELÉFONO MOVIL:");

        txtMail.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtMail.setForeground(new java.awt.Color(0, 0, 153));
        txtMail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMailActionPerformed(evt);
            }
        });

        txtNombre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 153));
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNombreKeyReleased(evt);
            }
        });

        txtTeleCasa.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtTeleCasa.setForeground(new java.awt.Color(0, 0, 153));
        txtTeleCasa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTeleCasaActionPerformed(evt);
            }
        });

        txtEdad.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtEdad.setForeground(new java.awt.Color(0, 0, 153));
        txtEdad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEdadActionPerformed(evt);
            }
        });

        jLabel71.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel71.setText("EDAD:");

        pnlImag.setBackground(new java.awt.Color(153, 0, 0));
        pnlImag.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        chkEsta.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        chkEsta.setForeground(new java.awt.Color(51, 51, 51));
        chkEsta.setText("EMPLEADO ACTIVO");
        chkEsta.setHideActionText(true);
        chkEsta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkEstaActionPerformed(evt);
            }
        });
        chkEsta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                chkEstaKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlImagLayout = new javax.swing.GroupLayout(pnlImag);
        pnlImag.setLayout(pnlImagLayout);
        pnlImagLayout.setHorizontalGroup(
            pnlImagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chkEsta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
        );
        pnlImagLayout.setVerticalGroup(
            pnlImagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(chkEsta, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        lblEstatusCliente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblEstatusCliente.setText("ESTATUS DE CLIENTE:");

        txtOcupacion.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtOcupacion.setForeground(new java.awt.Color(0, 0, 153));
        txtOcupacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOcupacionActionPerformed(evt);
            }
        });

        jLabel72.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel72.setText("OCUPACIÓN:");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTeleCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel54))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTele, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel66))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel53)
                                    .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel71)
                                    .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel56))
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(pnlImag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addComponent(lblEstatusCliente)))
                        .addGap(80, 80, 80))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel21Layout.createSequentialGroup()
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel50))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel51))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtMaterno)
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addComponent(jLabel52)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                                .addComponent(txtDire, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtOcupacion)
                                    .addGroup(jPanel21Layout.createSequentialGroup()
                                        .addComponent(jLabel72)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel65)
                                    .addComponent(cbxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(125, 125, 125))))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jLabel51)
                    .addComponent(jLabel50))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel56))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel72)
                            .addComponent(jLabel65))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cbxGenero, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDire, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOcupacion, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(18, 18, 18)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblEstatusCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel66)
                        .addComponent(jLabel54, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtMail, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTele, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTeleCasa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(pnlImag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        AgregarCliente.getContentPane().add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 970, 250));

        lblTituloCliente.setFont(new java.awt.Font("Arial", 1, 16)); // NOI18N
        lblTituloCliente.setText("PACIENTES");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addComponent(lblTituloCliente)
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addComponent(lblTituloCliente)
                .addGap(0, 1, Short.MAX_VALUE))
        );

        AgregarCliente.getContentPane().add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, 260, 20));

        jButton10.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/exit2.png"))); // NOI18N
        jButton10.setMnemonic('S');
        jButton10.setText("SALIR");
        jButton10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton10.setIconTextGap(20);
        jButton10.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/exit3.png"))); // NOI18N
        jButton10.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/exit1.png"))); // NOI18N
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        btnActualizar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/update2.png"))); // NOI18N
        btnActualizar.setMnemonic('A');
        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.setToolTipText("");
        btnActualizar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnActualizar.setIconTextGap(20);
        btnActualizar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/update3.png"))); // NOI18N
        btnActualizar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/update1.png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnGuardarPaciente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnGuardarPaciente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/add2.png"))); // NOI18N
        btnGuardarPaciente.setMnemonic('G');
        btnGuardarPaciente.setText("GUARDAR");
        btnGuardarPaciente.setToolTipText("");
        btnGuardarPaciente.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarPaciente.setIconTextGap(20);
        btnGuardarPaciente.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/add3.png"))); // NOI18N
        btnGuardarPaciente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/empleados/imagenes/add1.png"))); // NOI18N
        btnGuardarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPacienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel23Layout = new javax.swing.GroupLayout(jPanel23);
        jPanel23.setLayout(jPanel23Layout);
        jPanel23Layout.setHorizontalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(73, 73, 73)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185)
                .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                .addComponent(btnGuardarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63))
        );
        jPanel23Layout.setVerticalGroup(
            jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel23Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnGuardarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        AgregarCliente.getContentPane().add(jPanel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, 970, 120));

        lblId.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        AgregarCliente.getContentPane().add(lblId, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 40, 40));

        lblFechaCliente.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblFechaCliente.setText("FECHA:");

        jLabel73.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel73.setText("FECHA DE REGISTRO:");

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel73)
                .addGap(18, 18, 18)
                .addComponent(lblFechaCliente)
                .addContainerGap(62, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblFechaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        AgregarCliente.getContentPane().add(jPanel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, 260, 30));

        lblIdNomb.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblIdNomb.setText("ID:");
        AgregarCliente.getContentPane().add(lblIdNomb, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, 40));

        jlabelCategoria1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jlabelCategoria1.setText("CATEGORÍA:");

        lblCategoriaCliente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblCategoriaCliente.setText("aquí");

        cbxCategoriaPaciente.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        cbxCategoriaPaciente.setForeground(new java.awt.Color(0, 0, 153));
        cbxCategoriaPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Selecciona--", "PACIENTE", "CLIENTE" }));

        javax.swing.GroupLayout jPanel25Layout = new javax.swing.GroupLayout(jPanel25);
        jPanel25.setLayout(jPanel25Layout);
        jPanel25Layout.setHorizontalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(jlabelCategoria1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxCategoriaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblCategoriaCliente))
        );
        jPanel25Layout.setVerticalGroup(
            jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblCategoriaCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addComponent(jlabelCategoria1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addComponent(cbxCategoriaPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        AgregarCliente.getContentPane().add(jPanel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 320, 40));

        jLabel74.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONOS BOTONES/FONDOS/FONDO CTRL EMPLEADO.png"))); // NOI18N
        AgregarCliente.getContentPane().add(jLabel74, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1020, 540));

        jPanel26.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel26.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel27.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel57.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(0, 0, 153));
        jLabel57.setText("OD");

        jLabel75.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel75.setForeground(new java.awt.Color(0, 0, 153));
        jLabel75.setText("OI");

        jLabel76.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(0, 0, 153));
        jLabel76.setText("AO");

        cbLejosOD1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosOD1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));
        cbLejosOD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLejosOD1ActionPerformed(evt);
            }
        });

        cbLejosOI1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosOI1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));

        cbLejosAO1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosAO1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));

        javax.swing.GroupLayout jPanel27Layout = new javax.swing.GroupLayout(jPanel27);
        jPanel27.setLayout(jPanel27Layout);
        jPanel27Layout.setHorizontalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addComponent(jLabel76)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbLejosAO1, 0, 132, Short.MAX_VALUE))
                    .addGroup(jPanel27Layout.createSequentialGroup()
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel75)
                            .addComponent(jLabel57))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbLejosOD1, 0, 132, Short.MAX_VALUE)
                            .addComponent(cbLejosOI1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel27Layout.setVerticalGroup(
            jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel27Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLejosOD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57))
                .addGap(14, 14, 14)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel75)
                    .addComponent(cbLejosOI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel76)
                    .addComponent(cbLejosAO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel26.add(jPanel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 35, -1, 128));

        jLabel77.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel77.setText("AV. (Lejos)");
        jPanel26.add(jLabel77, new org.netbeans.lib.awtextra.AbsoluteConstraints(64, 13, 74, -1));

        jPanel28.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel28.setPreferredSize(new java.awt.Dimension(185, 124));

        jLabel78.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(0, 0, 102));
        jLabel78.setText("OD");

        jLabel79.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel79.setForeground(new java.awt.Color(0, 0, 102));
        jLabel79.setText("OI");

        jLabel80.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(0, 0, 102));
        jLabel80.setText("AO");

        cbAgujeroOD1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroOD1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAgujeroOI1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroOI1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAgujeroAO1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroAO1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));
        cbAgujeroAO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAgujeroAO1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel28Layout = new javax.swing.GroupLayout(jPanel28);
        jPanel28.setLayout(jPanel28Layout);
        jPanel28Layout.setHorizontalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel80)
                        .addGap(18, 18, 18)
                        .addComponent(cbAgujeroAO1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel78)
                    .addGroup(jPanel28Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(cbAgujeroOD1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                        .addComponent(jLabel79)
                        .addGap(18, 18, 18)
                        .addComponent(cbAgujeroOI1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        jPanel28Layout.setVerticalGroup(
            jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel28Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel78)
                    .addComponent(cbAgujeroOD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel79, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel28Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cbAgujeroOI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel80)
                    .addComponent(cbAgujeroAO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        jPanel26.add(jPanel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 35, -1, 128));

        jPanel29.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel81.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(0, 0, 102));
        jLabel81.setText("OD");

        jLabel82.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel82.setForeground(new java.awt.Color(0, 0, 102));
        jLabel82.setText("OI");

        jLabel83.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel83.setForeground(new java.awt.Color(0, 0, 102));
        jLabel83.setText("AO");

        cbRXAnteriorOD1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorOD1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbRXAnteriorOI1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorOI1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbRXAnteriorAO1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorAO1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        javax.swing.GroupLayout jPanel29Layout = new javax.swing.GroupLayout(jPanel29);
        jPanel29.setLayout(jPanel29Layout);
        jPanel29Layout.setHorizontalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel29Layout.createSequentialGroup()
                        .addComponent(jLabel83)
                        .addGap(18, 18, 18)
                        .addComponent(cbRXAnteriorAO1, 0, 122, Short.MAX_VALUE))
                    .addGroup(jPanel29Layout.createSequentialGroup()
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel81)
                            .addComponent(jLabel82))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbRXAnteriorOI1, 0, 122, Short.MAX_VALUE)
                            .addComponent(cbRXAnteriorOD1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        jPanel29Layout.setVerticalGroup(
            jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel29Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel81)
                    .addComponent(cbRXAnteriorOD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(cbRXAnteriorOI1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel83)
                    .addComponent(cbRXAnteriorAO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel26.add(jPanel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(537, 35, -1, -1));

        jPanel30.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel30.setPreferredSize(new java.awt.Dimension(185, 118));

        jLabel84.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel84.setForeground(new java.awt.Color(0, 0, 102));
        jLabel84.setText("OD");

        jLabel85.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel85.setForeground(new java.awt.Color(0, 0, 102));
        jLabel85.setText("OI");

        jLabel86.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel86.setForeground(new java.awt.Color(0, 0, 102));
        jLabel86.setText("AO");

        cbAVRXAnteriorOD1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorOD1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAVRXAnteriorOI1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorOI1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAVRXAnteriorAO1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorAO1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        javax.swing.GroupLayout jPanel30Layout = new javax.swing.GroupLayout(jPanel30);
        jPanel30.setLayout(jPanel30Layout);
        jPanel30Layout.setHorizontalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel30Layout.createSequentialGroup()
                        .addComponent(jLabel84)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbAVRXAnteriorOD1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel30Layout.createSequentialGroup()
                        .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel86)
                            .addComponent(jLabel85))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAVRXAnteriorOI1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbAVRXAnteriorAO1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel30Layout.setVerticalGroup(
            jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel30Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAVRXAnteriorOD1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel84))
                .addGap(15, 15, 15)
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel85)
                    .addComponent(cbAVRXAnteriorOI1))
                .addGap(14, 14, 14)
                .addGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel86)
                    .addComponent(cbAVRXAnteriorAO1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel26.add(jPanel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 197, 170, 124));

        jPanel31.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel31.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel87.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel87.setForeground(new java.awt.Color(0, 51, 102));
        jLabel87.setText("OD");
        jPanel31.add(jLabel87, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 38, 24, -1));

        jLabel88.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel88.setForeground(new java.awt.Color(0, 0, 102));
        jLabel88.setText("OI");
        jPanel31.add(jLabel88, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 87, 23, -1));

        jLabel89.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel89.setForeground(new java.awt.Color(0, 0, 102));
        jLabel89.setText("ESF.");
        jPanel31.add(jLabel89, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, -1, -1));

        jLabel90.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel90.setForeground(new java.awt.Color(0, 0, 102));
        jLabel90.setText("CIL.");
        jPanel31.add(jLabel90, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, -1, -1));

        jLabel91.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel91.setForeground(new java.awt.Color(0, 0, 102));
        jLabel91.setText("EJE");
        jPanel31.add(jLabel91, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, -1, -1));

        jLabel92.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel92.setForeground(new java.awt.Color(0, 0, 102));
        jLabel92.setText("ADD");
        jPanel31.add(jLabel92, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, -1, -1));

        jLabel93.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel93.setForeground(new java.awt.Color(0, 0, 102));
        jLabel93.setText("PRISMA");
        jPanel31.add(jLabel93, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, -1, -1));
        jPanel31.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 75, 540, 1));

        txtEsferaOD1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEsferaOD1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtEsferaOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 60, 30));

        txtEsferaOI1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEsferaOI1.setForeground(new java.awt.Color(204, 0, 51));
        txtEsferaOI1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEsferaOI1ActionPerformed(evt);
            }
        });
        jPanel31.add(txtEsferaOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 81, 60, 30));

        txtCilindroOD1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtCilindroOD1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtCilindroOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 60, 30));

        txtCilindroOI1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtCilindroOI1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtCilindroOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 60, 30));

        txtEjeOI1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEjeOI1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtEjeOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 48, 30));

        txtEjeOD1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEjeOD1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtEjeOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 46, 31));

        txtADDOD1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtADDOD1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtADDOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 70, 31));

        txtADDOI1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtADDOI1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtADDOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 70, 32));

        txtPrismaOD1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtPrismaOD1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtPrismaOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 70, 32));

        txtPrismaOI1.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtPrismaOI1.setForeground(new java.awt.Color(204, 0, 51));
        jPanel31.add(txtPrismaOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 70, 32));

        cbPocisionOI1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbPocisionOI1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona:", "^ Arriba", "v  Abajo", "> Derecha", "< Izquierda" }));
        jPanel31.add(cbPocisionOI1, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 80, 100, -1));

        cbPocisionOD1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbPocisionOD1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona:", "^ Arriba", "v  Abajo", "> Derecha", "< Izquierda" }));
        cbPocisionOD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPocisionOD1ActionPerformed(evt);
            }
        });
        jPanel31.add(cbPocisionOD1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 100, -1));

        jLabel94.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel94.setForeground(new java.awt.Color(0, 0, 102));
        jLabel94.setText("Pocisión:");
        jPanel31.add(jLabel94, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        jLabel95.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel95.setText("º");
        jPanel31.add(jLabel95, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        jLabel96.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel96.setText("º");
        jPanel31.add(jLabel96, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 76, -1, -1));

        jLabel97.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel97.setText("+");
        jPanel31.add(jLabel97, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, -1, -1));

        jLabel98.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel98.setText("+");
        jPanel31.add(jLabel98, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, 20));

        jPanel26.add(jPanel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 700, 210));

        jLabel99.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel99.setText("Agujero estenopeico");
        jPanel26.add(jLabel99, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 13, -1, -1));

        jLabel100.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel100.setText("Con RX anterior");
        jPanel26.add(jLabel100, new org.netbeans.lib.awtextra.AbsoluteConstraints(584, 13, -1, -1));

        jLabel101.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel101.setForeground(new java.awt.Color(204, 0, 51));
        jLabel101.setText("AV c/RX Final Paciente");
        jPanel26.add(jLabel101, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 175, -1, -1));

        jLabel102.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel102.setForeground(new java.awt.Color(204, 0, 0));
        jLabel102.setText("RX FINAL");
        jPanel26.add(jLabel102, new org.netbeans.lib.awtextra.AbsoluteConstraints(487, 174, -1, -1));

        javax.swing.GroupLayout NuevaVentaLayout = new javax.swing.GroupLayout(NuevaVenta.getContentPane());
        NuevaVenta.getContentPane().setLayout(NuevaVentaLayout);
        NuevaVentaLayout.setHorizontalGroup(
            NuevaVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 938, Short.MAX_VALUE)
            .addGroup(NuevaVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NuevaVentaLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, 918, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        NuevaVentaLayout.setVerticalGroup(
            NuevaVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
            .addGroup(NuevaVentaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NuevaVentaLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel26, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        Barra.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Barra.getContentPane().add(Progreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 0, 0));

        estados.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Barra.getContentPane().add(estados, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Alerta_Guardar.setUndecorated(true);
        Alerta_Guardar.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jp1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp1Layout = new javax.swing.GroupLayout(jp1);
        jp1.setLayout(jp1Layout);
        jp1Layout.setHorizontalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 36, Short.MAX_VALUE)
        );
        jp1Layout.setVerticalGroup(
            jp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, 67));

        jp2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp2Layout = new javax.swing.GroupLayout(jp2);
        jp2.setLayout(jp2Layout);
        jp2Layout.setHorizontalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp2Layout.setVerticalGroup(
            jp2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, -1, 67));

        jp3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp3Layout = new javax.swing.GroupLayout(jp3);
        jp3.setLayout(jp3Layout);
        jp3Layout.setHorizontalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp3Layout.setVerticalGroup(
            jp3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 100, -1, 67));

        jp4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp4Layout = new javax.swing.GroupLayout(jp4);
        jp4.setLayout(jp4Layout);
        jp4Layout.setHorizontalGroup(
            jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );
        jp4Layout.setVerticalGroup(
            jp4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 63, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, -1, -1));

        jp5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp5Layout = new javax.swing.GroupLayout(jp5);
        jp5.setLayout(jp5Layout);
        jp5Layout.setHorizontalGroup(
            jp5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp5Layout.setVerticalGroup(
            jp5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp5, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 100, -1, 67));

        jp6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp6Layout = new javax.swing.GroupLayout(jp6);
        jp6.setLayout(jp6Layout);
        jp6Layout.setHorizontalGroup(
            jp6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp6Layout.setVerticalGroup(
            jp6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp6, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, -1, 67));

        jp7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp7Layout = new javax.swing.GroupLayout(jp7);
        jp7.setLayout(jp7Layout);
        jp7Layout.setHorizontalGroup(
            jp7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp7Layout.setVerticalGroup(
            jp7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp7, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 100, -1, 67));

        jp8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp8Layout = new javax.swing.GroupLayout(jp8);
        jp8.setLayout(jp8Layout);
        jp8Layout.setHorizontalGroup(
            jp8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp8Layout.setVerticalGroup(
            jp8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp8, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 100, -1, 67));

        jp9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp9Layout = new javax.swing.GroupLayout(jp9);
        jp9.setLayout(jp9Layout);
        jp9Layout.setHorizontalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp9Layout.setVerticalGroup(
            jp9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp9, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, -1, 67));

        jp10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jp10Layout = new javax.swing.GroupLayout(jp10);
        jp10.setLayout(jp10Layout);
        jp10Layout.setHorizontalGroup(
            jp10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 37, Short.MAX_VALUE)
        );
        jp10Layout.setVerticalGroup(
            jp10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        Alerta_Guardar.getContentPane().add(jp10, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, -1, 67));

        jLabel104.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel104.setIcon(new javax.swing.ImageIcon("F:\\imagenes ayuda\\loading.gif")); // NOI18N
        jLabel104.setText("Guardando...");
        Alerta_Guardar.getContentPane().add(jLabel104, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        jButton5.setText("jButton5");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        Alerta_Guardar.getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 50, -1, -1));

        jLabel105.setIcon(new javax.swing.ImageIcon("F:\\imagenes ayuda\\fondo blanco.jpg")); // NOI18N
        Alerta_Guardar.getContentPane().add(jLabel105, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        BuscarPaciente.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cbxBuscarPaciente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        cbxBuscarPaciente.setForeground(new java.awt.Color(0, 0, 153));
        cbxBuscarPaciente.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxBuscarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxBuscarPacienteActionPerformed(evt);
            }
        });
        BuscarPaciente.getContentPane().add(cbxBuscarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 470, 40));

        btnColocarPaciente.setText("COLOCAR PACIENTE");
        btnColocarPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColocarPacienteActionPerformed(evt);
            }
        });
        BuscarPaciente.getContentPane().add(btnColocarPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 200, 180, 50));

        btnVerExamen.setText("VER EXAMEN VISUAL");
        btnVerExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerExamenActionPerformed(evt);
            }
        });
        BuscarPaciente.getContentPane().add(btnVerExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, 170, 50));

        jLabel107.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel107.setText("BUSCAR PACIENTE");
        BuscarPaciente.getContentPane().add(jLabel107, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 10, -1, -1));
        BuscarPaciente.getContentPane().add(lblCelularColocar, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 130, 120, 20));

        lblCelularNombre.setText("CELULAR:");
        BuscarPaciente.getContentPane().add(lblCelularNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 110, -1, -1));
        BuscarPaciente.getContentPane().add(lblDireccionColocar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 180, 20));

        lblDireccionNombre.setText("DIRECCIÓN:");
        BuscarPaciente.getContentPane().add(lblDireccionNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, -1, -1));
        BuscarPaciente.getContentPane().add(lblFechaDeRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 110, 20));

        jLabel108.setText("ID:");
        BuscarPaciente.getContentPane().add(jLabel108, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, -1, -1));

        jLabel110.setText("FECHA DE REGISTRO:");
        BuscarPaciente.getContentPane().add(jLabel110, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 110, -1, -1));
        BuscarPaciente.getContentPane().add(lblIdColocar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 130, 30, 20));
        BuscarPaciente.getContentPane().add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 530, 300));

        jMenu1.setText("Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Eliminar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        BuscarPaciente.setJMenuBar(jMenuBar1);

        jLabel106.setText("jLabel106");

        tblExamenVisual.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblExamenVisual);

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton7.setText("Eliminar");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton8.setText("Colocar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel109.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel109.setText("Examenes Visuales");

        lblNombreCompleto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout BuscarExamenLayout = new javax.swing.GroupLayout(BuscarExamen.getContentPane());
        BuscarExamen.getContentPane().setLayout(BuscarExamenLayout);
        BuscarExamenLayout.setHorizontalGroup(
            BuscarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuscarExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addGap(18, 18, 18))
            .addGroup(BuscarExamenLayout.createSequentialGroup()
                .addGroup(BuscarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(BuscarExamenLayout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(BuscarExamenLayout.createSequentialGroup()
                        .addGap(309, 309, 309)
                        .addComponent(jLabel109))
                    .addGroup(BuscarExamenLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(227, Short.MAX_VALUE))
        );
        BuscarExamenLayout.setVerticalGroup(
            BuscarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuscarExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel109)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(lblNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(BuscarExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1366, 768));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Datos Generales");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 50, 130, 30));

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        chkDiabetes.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        chkDiabetes.setText("Diabetes");
        chkDiabetes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDiabetesActionPerformed(evt);
            }
        });

        chkHipertension.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        chkHipertension.setText("Hipertención");

        chkMigraña.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        chkMigraña.setText("Migraña");
        chkMigraña.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMigrañaActionPerformed(evt);
            }
        });

        chkEmbarazo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        chkEmbarazo.setText("Embarazo");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDiabetes)
                    .addComponent(chkMigraña))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkHipertension)
                    .addComponent(chkEmbarazo))
                .addGap(50, 50, 50))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkDiabetes)
                    .addComponent(chkHipertension))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkMigraña)
                    .addComponent(chkEmbarazo))
                .addGap(18, 18, 18))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel17.setText("Visión lejana:");

        bgVisionLejana.add(rbVisionLejanaBuena);
        rbVisionLejanaBuena.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionLejanaBuena.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionLejanaBuena.setText("Buena");
        rbVisionLejanaBuena.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVisionLejanaBuenaActionPerformed(evt);
            }
        });

        bgVisionLejana.add(rbVisionLejanaMala);
        rbVisionLejanaMala.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionLejanaMala.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionLejanaMala.setText("Mala");
        rbVisionLejanaMala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVisionLejanaMalaActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel19.setText("Visión borrosa:");

        bgVisionBorrosa.add(rbVisionBorrosaSi);
        rbVisionBorrosaSi.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionBorrosaSi.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionBorrosaSi.setText("Si");
        rbVisionBorrosaSi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbVisionBorrosaSiActionPerformed(evt);
            }
        });

        bgVisionBorrosa.add(rbVisionBorrosaNo);
        rbVisionBorrosaNo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionBorrosaNo.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionBorrosaNo.setText("No");

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel18.setText("Visión cercana:");

        bgVisionCercana.add(rbVisionCercanaBuena);
        rbVisionCercanaBuena.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionCercanaBuena.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionCercanaBuena.setText("Buena");

        bgVisionCercana.add(rbVisionCercanaMala);
        rbVisionCercanaMala.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbVisionCercanaMala.setForeground(new java.awt.Color(0, 0, 102));
        rbVisionCercanaMala.setText("Mala");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel13.setText("Fotofobia:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel20.setText("(Molestia luz y reflejos)");

        bgFotofobia.add(rbFotofobiaSi);
        rbFotofobiaSi.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbFotofobiaSi.setForeground(new java.awt.Color(0, 0, 102));
        rbFotofobiaSi.setText("Si");

        bgFotofobia.add(rbFotofobiaNo);
        rbFotofobiaNo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbFotofobiaNo.setForeground(new java.awt.Color(0, 0, 102));
        rbFotofobiaNo.setText("No");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(10, 10, 10)
                        .addComponent(rbVisionCercanaBuena))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addGap(18, 18, 18)
                        .addComponent(rbVisionLejanaBuena, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(rbVisionLejanaMala, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel19)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(rbFotofobiaSi)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(rbVisionBorrosaSi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rbVisionBorrosaNo))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(rbVisionCercanaMala)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20)
                        .addGap(63, 63, 63)
                        .addComponent(rbFotofobiaNo)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(136, 136, 136))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbVisionLejanaBuena)
                    .addComponent(rbVisionLejanaMala)
                    .addComponent(jLabel19)
                    .addComponent(rbVisionBorrosaSi)
                    .addComponent(rbVisionBorrosaNo))
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addGap(1, 1, 1)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(rbVisionCercanaBuena)
                    .addComponent(rbVisionCercanaMala)
                    .addComponent(rbFotofobiaSi)
                    .addComponent(rbFotofobiaNo)
                    .addComponent(jLabel20))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel44.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(102, 102, 102));
        jLabel44.setText("General:");

        jLabel45.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(102, 102, 102));
        jLabel45.setText("Visual:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel45))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, 570, 270));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Estado de Salud");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(1200, 50, 150, 30));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setText("Fecha de Registro:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, -1, 20));

        lblIdPaciente.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblIdPaciente.setForeground(new java.awt.Color(204, 0, 0));
        jPanel1.add(lblIdPaciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 30, 20));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel5.setText("Dirección:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel6.setText("Ocupación:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel7.setText("Tel. Casa:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, 70, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel8.setText("Celular:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 180, -1, -1));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel9.setText("Sexo:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 100, -1, -1));

        txtNombreExamen.setEditable(false);
        txtNombreExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtNombreExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtNombreExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombreExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 50, 360, 29));

        txtDireccionExamen.setEditable(false);
        txtDireccionExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtDireccionExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtDireccionExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtDireccionExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 90, 360, 29));

        txtOcupacionExamen.setEditable(false);
        txtOcupacionExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtOcupacionExamen.setForeground(new java.awt.Color(0, 0, 153));
        jPanel1.add(txtOcupacionExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 130, 210, 29));

        txtFechaExamen.setEditable(false);
        txtFechaExamen.setFont(new java.awt.Font("Arial", 1, 13)); // NOI18N
        txtFechaExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtFechaExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtFechaExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, 110, 29));

        txtTelCasaExamen.setEditable(false);
        txtTelCasaExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtTelCasaExamen.setForeground(new java.awt.Color(0, 0, 153));
        jPanel1.add(txtTelCasaExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 170, 155, 29));

        txtTelCelExamen.setEditable(false);
        txtTelCelExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtTelCelExamen.setForeground(new java.awt.Color(0, 0, 153));
        jPanel1.add(txtTelCelExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 170, 160, 29));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel10.setText("Electrónico:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        txtMailExamen.setEditable(false);
        txtMailExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtMailExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtMailExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMailExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtMailExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 220, 240, 30));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel11.setText("Correo");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 210, 50, 20));

        txtSexoExamen.setEditable(false);
        txtSexoExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtSexoExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtSexoExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSexoExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtSexoExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 90, 60, 29));

        jButton6.setText("Modificar");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 230, -1, -1));

        jLabel46.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel46.setText("Nombre:");
        jPanel1.add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        jLabel47.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel47.setText("ID:");
        jPanel1.add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, -1, 20));

        jLabel48.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel48.setText("Edad:");
        jPanel1.add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 60, -1, -1));

        txtEdadExamen.setEditable(false);
        txtEdadExamen.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEdadExamen.setForeground(new java.awt.Color(0, 0, 153));
        txtEdadExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEdadExamenActionPerformed(evt);
            }
        });
        jPanel1.add(txtEdadExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 50, 60, 29));

        jButton4.setText("Limpiar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 230, 80, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 80, 580, 270));

        jPanel6.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), javax.swing.BorderFactory.createEtchedBorder()));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel14.setText("Pacientes:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel15.setText("Historial Clínico");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel14)
                .addGap(36, 36, 36)
                .addComponent(jLabel15)
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 0, 390, 40));

        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel25.setText("OBSERVACIONES:");

        txtArea.setColumns(20);
        txtArea.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtArea.setForeground(new java.awt.Color(204, 0, 0));
        txtArea.setRows(5);
        jScrollPane1.setViewportView(txtArea);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel21.setText("Parpados y pestañas:");

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel22.setText("Pantalleo:");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel24.setText("Miosis y midrasis:");
        jLabel24.setToolTipText("Dilatación de pupilas");

        bgParpadeos.add(rbParpadeosRegular);
        rbParpadeosRegular.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbParpadeosRegular.setForeground(new java.awt.Color(0, 0, 102));
        rbParpadeosRegular.setText("Regular");
        rbParpadeosRegular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbParpadeosRegularActionPerformed(evt);
            }
        });

        bgParpadeos.add(rbParpadeosMalo);
        rbParpadeosMalo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbParpadeosMalo.setForeground(new java.awt.Color(0, 0, 102));
        rbParpadeosMalo.setText("Malo");

        bgPantalleo.add(rbPantalleoBueno);
        rbPantalleoBueno.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbPantalleoBueno.setForeground(new java.awt.Color(0, 0, 102));
        rbPantalleoBueno.setText("Bueno");
        rbPantalleoBueno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPantalleoBuenoActionPerformed(evt);
            }
        });

        bgPantalleo.add(rbPantalleoRegular);
        rbPantalleoRegular.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbPantalleoRegular.setForeground(new java.awt.Color(0, 0, 102));
        rbPantalleoRegular.setText("Regular");

        bgPantalleo.add(rbPantalleoMalo);
        rbPantalleoMalo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbPantalleoMalo.setForeground(new java.awt.Color(0, 0, 102));
        rbPantalleoMalo.setText("Malo");
        rbPantalleoMalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPantalleoMaloActionPerformed(evt);
            }
        });

        bgMiosis.add(rbMiosisBueno);
        rbMiosisBueno.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbMiosisBueno.setForeground(new java.awt.Color(0, 0, 102));
        rbMiosisBueno.setText("Bueno");

        bgMiosis.add(rbMiosisRegular);
        rbMiosisRegular.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbMiosisRegular.setForeground(new java.awt.Color(0, 0, 102));
        rbMiosisRegular.setText("Regular");

        bgMiosis.add(rbMiosisMalo);
        rbMiosisMalo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbMiosisMalo.setForeground(new java.awt.Color(0, 0, 102));
        rbMiosisMalo.setText("Malo");
        rbMiosisMalo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMiosisMaloActionPerformed(evt);
            }
        });

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel23.setText("(Fobias y trofias)");

        bgParpadeos.add(rbParpadeosBueno);
        rbParpadeosBueno.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        rbParpadeosBueno.setForeground(new java.awt.Color(0, 0, 102));
        rbParpadeosBueno.setText("Bueno");
        rbParpadeosBueno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbParpadeosBuenoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel24)
                                    .addGap(35, 35, 35)
                                    .addComponent(rbMiosisBueno))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                                    .addComponent(jLabel21)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(rbParpadeosBueno)))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(rbPantalleoBueno)))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbPantalleoRegular)
                            .addComponent(rbMiosisRegular)
                            .addComponent(rbParpadeosRegular))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbParpadeosMalo)
                            .addComponent(rbMiosisMalo)
                            .addComponent(rbPantalleoMalo)))
                    .addComponent(jLabel23))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(rbParpadeosRegular)
                    .addComponent(rbParpadeosMalo)
                    .addComponent(rbParpadeosBueno))
                .addGap(17, 17, 17)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(rbPantalleoBueno)
                    .addComponent(rbPantalleoRegular)
                    .addComponent(rbPantalleoMalo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbMiosisRegular)
                    .addComponent(rbMiosisBueno)
                    .addComponent(rbMiosisMalo)
                    .addComponent(jLabel24))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 13, Short.MAX_VALUE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 410, 330));

        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setText("Revisión de Anexos");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 150, 30));

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel28.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(0, 0, 153));
        jLabel28.setText("OD");

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(0, 0, 153));
        jLabel29.setText("OI");

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(0, 0, 153));
        jLabel30.setText("AO");

        cbLejosOD.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosOD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));
        cbLejosOD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLejosODActionPerformed(evt);
            }
        });

        cbLejosOI.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosOI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));

        cbLejosAO.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbLejosAO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/200", "20/100", "20/70", "20/50", "20/40", "20/30", "20/25", "20/20", "20/15", "20/13", "20/10" }));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbLejosAO, 0, 132, Short.MAX_VALUE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbLejosOD, 0, 132, Short.MAX_VALUE)
                            .addComponent(cbLejosOI, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLejosOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLejosOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbLejosAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addContainerGap())
        );

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel27.setText("AV. (Lejos)");

        jPanel15.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel15.setPreferredSize(new java.awt.Dimension(185, 124));

        jLabel31.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(0, 0, 102));
        jLabel31.setText("OD");

        jLabel32.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(0, 0, 102));
        jLabel32.setText("OI");

        jLabel33.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(0, 0, 102));
        jLabel33.setText("AO");

        cbAgujeroOD.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroOD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAgujeroOI.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroOI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAgujeroAO.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAgujeroAO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));
        cbAgujeroAO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAgujeroAOActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addGap(18, 18, 18)
                        .addComponent(cbAgujeroAO, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel31)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(cbAgujeroOD, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(18, 18, 18)
                        .addComponent(cbAgujeroOI, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 21, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(cbAgujeroOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAgujeroOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAgujeroAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addContainerGap())
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel34.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(0, 0, 102));
        jLabel34.setText("OD");

        jLabel35.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel35.setForeground(new java.awt.Color(0, 0, 102));
        jLabel35.setText("OI");

        jLabel36.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel36.setForeground(new java.awt.Color(0, 0, 102));
        jLabel36.setText("AO");

        cbRXAnteriorOD.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorOD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbRXAnteriorOI.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorOI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbRXAnteriorAO.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbRXAnteriorAO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel36)
                        .addGap(18, 18, 18)
                        .addComponent(cbRXAnteriorAO, 0, 122, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel34)
                            .addComponent(jLabel35))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cbRXAnteriorOI, 0, 122, Short.MAX_VALUE)
                            .addComponent(cbRXAnteriorOD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 26, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel34)
                    .addComponent(cbRXAnteriorOD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRXAnteriorOI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRXAnteriorAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36))
                .addContainerGap())
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel16.setPreferredSize(new java.awt.Dimension(185, 118));

        jLabel40.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel40.setForeground(new java.awt.Color(0, 0, 102));
        jLabel40.setText("OD");

        jLabel41.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(0, 0, 102));
        jLabel41.setText("OI");

        jLabel42.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(0, 0, 102));
        jLabel42.setText("AO");

        cbAVRXAnteriorOD.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorOD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAVRXAnteriorOI.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorOI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        cbAVRXAnteriorAO.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbAVRXAnteriorAO.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Elija opción:", "20/10", "20/13", "20/15", "20/20", "20/25", "20/30", "20/40", "20/50", "20/70", "20/100", "20/200" }));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbAVRXAnteriorOD, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel42)
                            .addComponent(jLabel41))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbAVRXAnteriorOI, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbAVRXAnteriorAO, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(0, 5, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAVRXAnteriorOD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40))
                .addGap(15, 15, 15)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41)
                    .addComponent(cbAVRXAnteriorOI))
                .addGap(14, 14, 14)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addComponent(cbAVRXAnteriorAO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel17.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel55.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(0, 51, 102));
        jLabel55.setText("OD");
        jPanel17.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 38, 24, -1));

        jLabel58.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(0, 0, 102));
        jLabel58.setText("OI");
        jPanel17.add(jLabel58, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 87, 23, -1));

        jLabel59.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(0, 0, 102));
        jLabel59.setText("ESF.");
        jPanel17.add(jLabel59, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, -1, -1));

        jLabel60.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(0, 0, 102));
        jLabel60.setText("CIL.");
        jPanel17.add(jLabel60, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, -1, -1));

        jLabel61.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(0, 0, 102));
        jLabel61.setText("EJE");
        jPanel17.add(jLabel61, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 0, -1, -1));

        jLabel62.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel62.setForeground(new java.awt.Color(0, 0, 102));
        jLabel62.setText("ADD");
        jPanel17.add(jLabel62, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, -1, -1));

        jLabel63.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(0, 0, 102));
        jLabel63.setText("PRISMA");
        jPanel17.add(jLabel63, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, -1, -1));
        jPanel17.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 75, 540, 1));

        txtEsferaOD.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEsferaOD.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtEsferaOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 30, 60, 30));

        txtEsferaOI.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEsferaOI.setForeground(new java.awt.Color(204, 0, 51));
        txtEsferaOI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEsferaOIActionPerformed(evt);
            }
        });
        jPanel17.add(txtEsferaOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(29, 81, 60, 30));

        txtCilindroOD.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtCilindroOD.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtCilindroOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 30, 60, 30));

        txtCilindroOI.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtCilindroOI.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtCilindroOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 60, 30));

        txtEjeOI.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEjeOI.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtEjeOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 80, 48, 30));

        txtEjeOD.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtEjeOD.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtEjeOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 30, 46, 31));

        txtADDOD.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtADDOD.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtADDOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, 70, 31));

        txtADDOI.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtADDOI.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtADDOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 80, 70, 32));

        txtPrismaOD.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtPrismaOD.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtPrismaOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 70, 32));

        txtPrismaOI.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        txtPrismaOI.setForeground(new java.awt.Color(204, 0, 51));
        jPanel17.add(txtPrismaOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 80, 70, 32));

        cbPocisionOI.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbPocisionOI.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona:", "^ Arriba", "v  Abajo", "> Derecha", "< Izquierda" }));
        jPanel17.add(cbPocisionOI, new org.netbeans.lib.awtextra.AbsoluteConstraints(428, 80, 100, -1));

        cbPocisionOD.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        cbPocisionOD.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecciona:", "^ Arriba", "v  Abajo", "> Derecha", "< Izquierda" }));
        cbPocisionOD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPocisionODActionPerformed(evt);
            }
        });
        jPanel17.add(cbPocisionOD, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 30, 100, -1));

        jLabel64.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(0, 0, 102));
        jLabel64.setText("Pocisión:");
        jPanel17.add(jLabel64, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        jLabel67.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel67.setText("º");
        jPanel17.add(jLabel67, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        jLabel68.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel68.setText("º");
        jPanel17.add(jLabel68, new org.netbeans.lib.awtextra.AbsoluteConstraints(231, 76, -1, -1));

        jLabel69.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel69.setText("+");
        jPanel17.add(jLabel69, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, -1, -1));

        jLabel70.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel70.setText("+");
        jPanel17.add(jLabel70, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 90, -1, 20));

        jLabel37.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel37.setText("Agujero estenopeico");

        jLabel38.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel38.setText("Con RX anterior");

        jLabel39.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel39.setForeground(new java.awt.Color(204, 0, 51));
        jLabel39.setText("AV c/RX Final Paciente");

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(204, 0, 0));
        jLabel43.setText("RX FINAL");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(jLabel38)
                .addGap(128, 128, 128)
                .addComponent(jLabel37)
                .addGap(154, 154, 154)
                .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 540, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(61, 61, 61)
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addGap(317, 317, 317)
                        .addComponent(jLabel43))))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel37))
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel39))
                    .addComponent(jLabel43))
                .addGap(6, 6, 6)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jPanel17, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 400, 740, 330));

        jPanel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setText("Agudeza Visual");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel26)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 360, 140, 30));

        btnGuardarExamenVisual.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnGuardarExamenVisual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/2 guardar.png"))); // NOI18N
        btnGuardarExamenVisual.setText("GUARDAR");
        btnGuardarExamenVisual.setBorder(null);
        btnGuardarExamenVisual.setBorderPainted(false);
        btnGuardarExamenVisual.setContentAreaFilled(false);
        btnGuardarExamenVisual.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarExamenVisual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuardarExamenVisual.setIconTextGap(-4);
        btnGuardarExamenVisual.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/3 guardar.png"))); // NOI18N
        btnGuardarExamenVisual.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/1 guardar.png"))); // NOI18N
        btnGuardarExamenVisual.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnGuardarExamenVisual.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnGuardarExamenVisual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarExamenVisualActionPerformed(evt);
            }
        });

        btnAgregar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/2 nuevo.png"))); // NOI18N
        btnAgregar.setText("NUEVO");
        btnAgregar.setBorder(null);
        btnAgregar.setBorderPainted(false);
        btnAgregar.setContentAreaFilled(false);
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAgregar.setIconTextGap(-4);
        btnAgregar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/3 nuevo.png"))); // NOI18N
        btnAgregar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/1 nuevo.png"))); // NOI18N
        btnAgregar.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        btnAgregar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/2 atraz.png"))); // NOI18N
        jButton2.setText("ATRAS");
        jButton2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jButton2.setBorderPainted(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setIconTextGap(-4);
        jButton2.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/3 atraz.png"))); // NOI18N
        jButton2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/1 atraz.png"))); // NOI18N
        jButton2.setVerifyInputWhenFocusTarget(false);
        jButton2.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/2 cerrar.png"))); // NOI18N
        jButton3.setText("CERRAR SESION");
        jButton3.setBorderPainted(false);
        jButton3.setContentAreaFilled(false);
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setIconTextGap(-4);
        jButton3.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/3 cerrar.png"))); // NOI18N
        jButton3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Pacientes/pacientes img/1 cerrar.png"))); // NOI18N
        jButton3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton3))
                    .addGroup(jPanel18Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnGuardarExamenVisual, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addComponent(btnGuardarExamenVisual)
                .addGap(1, 1, 1)
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, 160, 400));
        getContentPane().add(clockFace1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 140, 130));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Hoy es:");

        lblHoy.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoy.setForeground(new java.awt.Color(0, 102, 0));

        lblHoy1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblHoy1.setForeground(new java.awt.Color(0, 102, 0));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHoy1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblHoy, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(lblHoy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(lblHoy1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 10, 220, 20));

        jLabel49.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel49.setText("Examen Visual #:");

        lblExamenVisual.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblExamenVisual.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblExamenVisual)
                .addContainerGap(108, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel49, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                .addComponent(lblExamenVisual))
        );

        getContentPane().add(jPanel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, 220, 20));

        btnExtender.setText("Extender");
        btnExtender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtenderActionPerformed(evt);
            }
        });
        getContentPane().add(btnExtender, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 360, -1, 30));

        lblIdAgudezaVisual.setText("jLabel103");
        getContentPane().add(lblIdAgudezaVisual, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 360, -1, 30));

        btnBuscarPacientes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnBuscarPacientes.setText("BUSCAR PACIENTE");
        btnBuscarPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPacientesActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscarPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, 160, 30));

        btnTodosPacientes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnTodosPacientes.setText("TODOS LOS PACIENTES");
        btnTodosPacientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTodosPacientesActionPerformed(evt);
            }
        });
        getContentPane().add(btnTodosPacientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 610, 160, 30));

        lblUsuario.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUsuario.setForeground(new java.awt.Color(0, 102, 51));
        lblUsuario.setText("Ninguno");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("En conexión:");

        javax.swing.GroupLayout jPanel32Layout = new javax.swing.GroupLayout(jPanel32);
        jPanel32.setLayout(jPanel32Layout);
        jPanel32Layout.setHorizontalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel32Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
        );
        jPanel32Layout.setVerticalGroup(
            jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel32Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)))
        );

        getContentPane().add(jPanel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(1170, 10, 180, 20));

        btnModificar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnModificar.setText("ACTUALIZAR");
        btnModificar.setToolTipText("");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        getContentPane().add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, 160, 30));

        btnLimpiarTodo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnLimpiarTodo.setText("LIMPIAR TODO");
        btnLimpiarTodo.setToolTipText("");
        btnLimpiarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTodoActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiarTodo, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 690, 160, 30));

        lblUnode.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblUnode.setText("1");
        getContentPane().add(lblUnode, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 50, 40, 20));

        lblDe.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblDe.setText("de");
        getContentPane().add(lblDe, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 50, 20, 20));

        lblNumero.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblNumero.setText("100");
        getContentPane().add(lblNumero, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 50, 30, 20));

        btnNextExamen.setText("Siguiente");
        btnNextExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextExamenActionPerformed(evt);
            }
        });
        getContentPane().add(btnNextExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 50, -1, -1));

        btnAnteriorExamen.setText("Anterior");
        btnAnteriorExamen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnteriorExamenActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnteriorExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(641, 50, 80, -1));

        lblFechaExamen.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblFechaExamen.setForeground(new java.awt.Color(102, 0, 0));
        lblFechaExamen.setText("Fecha de examen");

        javax.swing.GroupLayout pnlFechaExamenLayout = new javax.swing.GroupLayout(pnlFechaExamen);
        pnlFechaExamen.setLayout(pnlFechaExamenLayout);
        pnlFechaExamenLayout.setHorizontalGroup(
            pnlFechaExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFechaExamenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblFechaExamen, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlFechaExamenLayout.setVerticalGroup(
            pnlFechaExamenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblFechaExamen, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
        );

        getContentPane().add(pnlFechaExamen, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 50, 290, 20));

        lblUltimaModificacion.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lblUltimaModificacion.setForeground(new java.awt.Color(102, 0, 0));
        lblUltimaModificacion.setText("Ultima modificación");

        javax.swing.GroupLayout pnlUltimaModificacionLayout = new javax.swing.GroupLayout(pnlUltimaModificacion);
        pnlUltimaModificacion.setLayout(pnlUltimaModificacionLayout);
        pnlUltimaModificacionLayout.setHorizontalGroup(
            pnlUltimaModificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUltimaModificacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUltimaModificacion, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlUltimaModificacionLayout.setVerticalGroup(
            pnlUltimaModificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblUltimaModificacion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
        );

        getContentPane().add(pnlUltimaModificacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 50, 260, -1));

        lblBacKground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ICONOS BOTONES/FONDOS/combinado1.png"))); // NOI18N
        getContentPane().add(lblBacKground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombreExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreExamenActionPerformed

    private void txtDireccionExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionExamenActionPerformed

    private void txtFechaExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaExamenActionPerformed

    private void txtMailExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMailExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMailExamenActionPerformed

    private void chkDiabetesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDiabetesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkDiabetesActionPerformed

    private void chkMigrañaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMigrañaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkMigrañaActionPerformed

    private void rbVisionLejanaMalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVisionLejanaMalaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbVisionLejanaMalaActionPerformed

    private void rbVisionLejanaBuenaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVisionLejanaBuenaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbVisionLejanaBuenaActionPerformed

    private void rbVisionBorrosaSiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbVisionBorrosaSiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbVisionBorrosaSiActionPerformed

    private void rbMiosisMaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMiosisMaloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMiosisMaloActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (invi == true) {
            VentanaUsuario obj = new VentanaUsuario();
            obj.setVisible(true);

        } else {
            Ventanaadmin obj2 = new Ventanaadmin();
            obj2.setVisible(true);

        }
        this.dispose();
        System.out.println(invitado + " categoria usuario en inventario");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void cbLejosODActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLejosODActionPerformed
        int indice = cbLejosOD.getSelectedIndex();
        cbLejosOD1.setSelectedIndex(indice);
    }//GEN-LAST:event_cbLejosODActionPerformed

    private void rbPantalleoBuenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPantalleoBuenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbPantalleoBuenoActionPerformed

    private void cbPocisionODActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPocisionODActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPocisionODActionPerformed

    private void txtEsferaOIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEsferaOIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEsferaOIActionPerformed

    private void rbParpadeosBuenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbParpadeosBuenoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbParpadeosBuenoActionPerformed

    private void txtSexoExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSexoExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSexoExamenActionPerformed

    private void txtEdadExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEdadExamenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEdadExamenActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            btnLimpiarTodo.doClick();
        } catch (Exception e) {
        }
        String formato = "dd/MM/yyyy";
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        String fechafin = sdf.format(date);
        System.out.println(fechafin);
//        Clientes cl = new Clientes();
//        cl.setVisible(false);
        cbxCategoriaPaciente.setSelectedIndex(1);
        cbxCategoriaPaciente.setEnabled(false);
        lblFechaCliente.setText(fechafin);
        lblTituloCliente.setText("PACIENTES");
        lblIdNomb.setVisible(false);
        lblCategoriaCliente.setVisible(false);
        lblCategoriaCliente.setText("PACIENTE");
        pnlImag.setVisible(false);
        lblEstatusCliente.setVisible(false);
        btnActualizar.setEnabled(false);
        btnGuardarPaciente.setEnabled(true);
        AgregarCliente.setModal(true);
        AgregarCliente.setLocationRelativeTo(null);
        AgregarCliente.setVisible(true);
        //if(btnGuardarPaciente.doClick()=true)
//        String sql = "SELECT MAX(EXAM_ID) AS id FROM examen_paciente";
//        int valorId, idNuevo;
//
//        try {
//            Conexionbd cc = new Conexionbd();
//            java.sql.Connection cn = cc.conexion();
//            String[] datosId = new String[1];
//
//            java.sql.Statement st = cn.createStatement();
//            ResultSet rs = st.executeQuery(sql);
//            while (rs.next()) {
//                datosId[0] = rs.getString(1);
//            }
//
//            String recibir = datosId[0];
//            cn.close();
//            System.out.println(recibir + " valor obtenido bd");
//            if (recibir.equals(null)) {
//                idNuevo = 1;
//                lblExamenVisual.setText(Integer.toString(idNuevo));
//            } else {
//                valorId = Integer.parseInt(recibir);
//                idNuevo = valorId + 1;
//                // Formatter fmt = new Formatter();
//                // fmt.format("%08d",idNuevo);
//                //System.out.println(fmt+"numero formateado");
//                lblExamenVisual.setText(Integer.toString(idNuevo));
//            }
//    } catch (Exception ex) {
//    System.out.println(ex);
//    String nl = System.getProperty("line.separator");
//    JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
//    + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
//    lblExamenVisual.setText(Integer.toString(1));
//    }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if (lblIdPaciente.getText() != "") {

//        Clientes cli = new Clientes();
            //EditarPaciente();
            cbxCategoriaPaciente.setEnabled(false);
            String fecha;
            String sql = "";
            sql = "SELECT PACI_ID, PACI_NOMB, PACI_PATE, PACI_MATE, PACI_DIRE, PACI_TELE_CASA, PACI_TELE_CELU, PACI_MAIL,"
                    + " PACI_FECH_REGI, SEXO_NOMB, PACI_EDAD, ESTA_PACI_NOMB, PACI_OCUP, CATE_NOMB FROM PACIENTE INNER JOIN SEXO INNER JOIN ESTATUS_PACIENTE INNER JOIN CATEGORIA_PACIENTE"
                    + " ON PACI_SEXO_ID=SEXO_ID AND PACI_ESTA_ID=ESTA_PACI_ID AND PACI_CATE_ID=CATE_ID WHERE PACI_ID='" + lblIdPaciente.getText() + "'";
            String[] datos = new String[15];
            try {
                Conexionbd cc = new Conexionbd();
                Connection cn = cc.conexion();
                Statement st = cn.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
//                    cli.lblId.setText(rs.getString(1));
//                    cli.txtFirstName.setText(rs.getString(2));
//                    cli.txtPaternoCliente.setText(rs.getString(3));
//                    cli.txtMaternoCliente.setText(rs.getString(4));
//                    cli.txtDire.setText(rs.getString(5));
//                    cli.txtTeleCasa.setText(rs.getString(6));
//                    cli.txtTele.setText(rs.getString(7));
//                    cli.txtMail.setText(rs.getString(8));
                    lblId.setText(rs.getString(1));
                    txtNombre.setText(rs.getString(2));
                    txtPaterno.setText(rs.getString(3));
                    txtMaterno.setText(rs.getString(4));
                    txtDire.setText(rs.getString(5));
                    txtTeleCasa.setText(rs.getString(6));
                    txtTele.setText(rs.getString(7));
                    txtMail.setText(rs.getString(8));
                    fecha = rs.getString(9);
                    System.out.println("Entrada->" + fecha);

                    DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                    java.util.Date date = null;

                    try {
                        date = inputFormatter.parse(fecha);
                    } catch (ParseException pe) {
                        pe.printStackTrace();
                    }

                    DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                    String salida = outputFormatter.format(date);
                    System.out.println("Salida->" + salida);
                    lblFechaCliente.setText(salida);
                    String sexo = rs.getString(10);
                    try {
                        Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
                        cbxGenero.removeAllItems();
                        cbxGenero.addItem("SELECCIONA:");
                        for (int i = 0; i < combo_llenar_sexo.length; i++) {
                            cbxGenero.addItem((String) combo_llenar_sexo[i]);
                        }
                    } catch (Exception e) {
                        Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
                        cbxGenero.removeAllItems();
                        cbxGenero.addItem("SELECCIONA:");
                        for (int i = 0; i < combo_llenar_sexo.length; i++) {
                            cbxGenero.addItem((String) combo_llenar_sexo[i]);
                        }
                    }

                    cbxGenero.setSelectedItem(sexo);
                    txtEdad.setText(rs.getString(11));
                    txtOcupacion.setText(rs.getString(13));
                    String categoria = rs.getString(14);
                    try {
                        Object[] combo_llenar_categoria = con.combox("CATEGORIA_PACIENTE", "CATE_NOMB");
                        cbxCategoriaPaciente.removeAllItems();
                        cbxCategoriaPaciente.addItem("--Selecciona--");
                        for (int i = 0; i < combo_llenar_categoria.length; i++) {
                            cbxCategoriaPaciente.addItem((String) combo_llenar_categoria[i]);
                        }
                    } catch (Exception e) {
                        Object[] combo_llenar_categoria = con.combox("CATEGORIA_PACIENTE", "CATE_NOMB");
                        cbxCategoriaPaciente.removeAllItems();
                        cbxCategoriaPaciente.addItem("--Selecciona--");
                        for (int i = 0; i < combo_llenar_categoria.length; i++) {
                            cbxCategoriaPaciente.addItem((String) combo_llenar_categoria[i]);
                        }
                    }

                    cbxCategoriaPaciente.setSelectedItem(categoria);
                    
                }
                cn.close();

            } catch (SQLException ex) {
                Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
                System.out.println(ex);
                JOptionPane.showMessageDialog(null, "Error ¡No se pudo colocar la información!");
            }
//            cli.setVisible(false);

            lblTituloCliente.setText("PACIENTES");
            lblIdNomb.setVisible(true);
            lblId.setVisible(true);
            lblCategoriaCliente.setVisible(false);
            lblCategoriaCliente.setText("PACIENTE");
            pnlImag.setVisible(false);
            lblEstatusCliente.setVisible(false);
            btnActualizar.setEnabled(true);
            btnGuardarPaciente.setEnabled(false);
            AgregarCliente.setModal(true);
            AgregarCliente.setLocationRelativeTo(null);
            AgregarCliente.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Error ¡No se puede editar información de campos vacios!");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void rbParpadeosRegularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbParpadeosRegularActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbParpadeosRegularActionPerformed

    private void rbPantalleoMaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPantalleoMaloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbPantalleoMaloActionPerformed

    private void cbAgujeroAOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAgujeroAOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAgujeroAOActionPerformed

    private void btnGuardarExamenVisualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarExamenVisualActionPerformed
        String validarPaciente = txtNombreExamen.getText();
        if (validarPaciente.equals("")) {
            String nl = System.getProperty("line.separator");
            JOptionPane.showMessageDialog(null, "¡Error! No se puede guardar información sin paciente" + nl + "Por favor agrega un nuevo paciente para continuar...");
            btnAgregar.requestFocus();
        } else {
            if (bgVisionLejana.isSelected(null)) {
                JOptionPane.showMessageDialog(null, "¡Error! Debes elegir el tipo de visión lejana del paciente");
                rbVisionLejanaBuena.requestFocus();
            } else {
                if (bgVisionBorrosa.isSelected(null)) {
                    JOptionPane.showMessageDialog(null, "¡Error! Indica si el paciente presenta visión borrosa");
                    rbVisionBorrosaSi.requestFocus();
                } else {
                    if (bgVisionCercana.isSelected(null)) {
                        JOptionPane.showMessageDialog(null, "¡Error! Debes elegir el tipo de visión cercana del paciente");
                        rbVisionCercanaBuena.requestFocus();
                    } else {
                        if (bgFotofobia.isSelected(null)) {
                            JOptionPane.showMessageDialog(null, "¡Error! Debes indicar si el paciente presenta sintomas de Fotofobia");
                            rbFotofobiaSi.requestFocus();
                        } else {
                            if (bgParpadeos.isSelected(null)) {
                                JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de parpadeos y pestañeos del paciente");
                                rbParpadeosBueno.requestFocus();
                            } else {
                                if (bgPantalleo.isSelected(null)) {
                                    JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de pantalleos del paciente");
                                    rbPantalleoBueno.requestFocus();
                                } else {
                                    if (bgMiosis.isSelected(null)) {
                                        JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de miosis y midrasis del paciente");
                                        rbMiosisBueno.requestFocus();
                                    } else {
                                        if (cbRXAnteriorOD.getSelectedItem().equals("Elija opción:")) {
                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior OD seleccionando un valor de la lista");
                                            cbRXAnteriorOD.requestFocus();
                                        } else {
                                            if (cbRXAnteriorOI.getSelectedItem().equals("Elija opción:")) {
                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior OI seleccionando un valor de la lista");
                                                cbRXAnteriorOI.requestFocus();
                                            } else {
                                                if (cbRXAnteriorAO.getSelectedItem().equals("Elija opción:")) {
                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior AO seleccionando un valor de la lista");
                                                    cbRXAnteriorAO.requestFocus();
                                                } else {
                                                    if (cbAgujeroOD.getSelectedItem().equals("Elija opción:")) {
                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico OD seleccionando un valor de la lista");
                                                        cbAgujeroOD.requestFocus();
                                                    } else {
                                                        if (cbAgujeroOI.getSelectedItem().equals("Elija opción:")) {
                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico OI seleccionando un valor de la lista");
                                                            cbAgujeroOI.requestFocus();
                                                        } else {
                                                            if (cbAgujeroAO.getSelectedItem().equals("Elija opción:")) {
                                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico AO seleccionando un valor de la lista");
                                                                cbAgujeroAO.requestFocus();
                                                            } else {
                                                                if (cbLejosOD.getSelectedItem().equals("Elija opción:")) {
                                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos OD seleccionando un valor de la lista");
                                                                    cbLejosOD.requestFocus();
                                                                } else {
                                                                    if (cbLejosOI.getSelectedItem().equals("Elija opción:")) {
                                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos OI seleccionando un valor de la lista");
                                                                        cbLejosOI.requestFocus();
                                                                    } else {
                                                                        if (cbLejosAO.getSelectedItem().equals("Elija opción:")) {
                                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos AO seleccionando un valor de la lista");
                                                                            cbLejosAO.requestFocus();
                                                                        } else {

                                                                            if (cbAVRXAnteriorOD.getSelectedItem().equals("Elija opción:")) {
                                                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente OD seleccionando un valor de la lista");
                                                                                cbAVRXAnteriorOD.requestFocus();
                                                                            } else {
                                                                                if (cbAVRXAnteriorOI.getSelectedItem().equals("Elija opción:")) {
                                                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente OI seleccionando un valor de la lista");
                                                                                    cbAVRXAnteriorOI.requestFocus();
                                                                                } else {
                                                                                    if (cbAVRXAnteriorAO.getSelectedItem().equals("Elija opción:")) {
                                                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente AO seleccionando un valor de la lista");
                                                                                        cbAVRXAnteriorAO.requestFocus();
                                                                                    } else {
                                                                                        String esfera, cilindro, eje, add, prisma, esferaoi, cilindrooi, ejeoi, addoi, prismaoi;
                                                                                        esfera = txtEsferaOD.getText();
                                                                                        esferaoi = txtEsferaOI.getText();
                                                                                        cilindro = txtCilindroOD.getText();
                                                                                        cilindrooi = txtCilindroOI.getText();
                                                                                        eje = txtEjeOD.getText();
                                                                                        ejeoi = txtEjeOI.getText();
                                                                                        add = txtADDOD.getText();
                                                                                        addoi = txtADDOI.getText();
                                                                                        prisma = txtPrismaOD.getText();
                                                                                        prismaoi = txtPrismaOI.getText();

                                                                                        if (esfera.equals("")
                                                                                                && esferaoi.equals("")
                                                                                                && cilindro.equals("") && cilindro.equals("")
                                                                                                && eje.equals("") && ejeoi.equals("")
                                                                                                && add.equals("") && addoi.equals("")
                                                                                                && prisma.equals("") && prismaoi.equals("")
                                                                                                && cbPocisionOD.getSelectedIndex() == (0) && cbPocisionOI.getSelectedIndex() == (0)) {
                                                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar los campos necesarios para RX Final del paciente");
                                                                                            cbAVRXAnteriorAO.requestFocus();
                                                                                        } else {
                                                                                            try {
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                //Alerta_Guardar.setModal(true);
//        Alerta_Guardar.setSize(510, 190);
//        Alerta_Guardar.setLocationRelativeTo(null);
//        Alerta_Guardar.setVisible(true);

                                                                                                String sql = "INSERT INTO examen_paciente (EXAM_ID, EXAM_FECH, EXAM_OBSE, EXAM_PACI_ID, EXAM_ULTI_MODI, EXAM_USUA_ID) VALUES (?,?,?,?,?,?)";

                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(sql);
                                                                                                    Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                                                                                                    int hora, minutos, segundos;
                                                                                                    hora = calendario.get(Calendar.HOUR_OF_DAY);
                                                                                                    minutos = calendario.get(Calendar.MINUTE);
                                                                                                    segundos = calendario.get(Calendar.SECOND);

                                                                                                    System.out.println("Entrada->" + lblHoy.getText() + " " + hora + ":" + minutos);
                                                                                                    DateFormat inputFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                                                                                                    java.util.Date date2 = null;

                                                                                                    try {
                                                                                                        date2 = inputFormatter.parse(lblHoy.getText() + " " + hora + ":" + minutos);
                                                                                                    } catch (ParseException pex) {
                                                                                                        pex.printStackTrace();
                                                                                                    }

                                                                                                    DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                                                                                                    String salida = outputFormatter.format(date2);
                                                                                                    System.out.println("Salida->" + salida);
                                                                                                    pst.setString(1, lblExamenVisual.getText());
                                                                                                    pst.setString(2, salida);
                                                                                                    pst.setString(3, txtArea.getText());
                                                                                                    pst.setString(4, lblIdPaciente.getText());
                                                                                                    pst.setString(5, lblHoy1.getText() + " " + lblHoy.getText());
                                                                                                    String query = "SELECT USUA_ID FROM USUARIOS WHERE USUA_NOMB='" + lblUsuario.getText() + "'";
                                                                                                    String[] datos2 = new String[2];
                                                                                                    int id = 0;
                                                                                                    Statement st = cn.createStatement();
                                                                                                    ResultSet rs = st.executeQuery(query);
                                                                                                    if (rs.next()) {
                                                                                                        id = Integer.parseInt(rs.getString(1));
                                                                                                    }

                                                                                                    pst.setString(6, Integer.toString(id));
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //    jp1.setBackground(Color.GREEN);
                                                                                                        //   evt.wait(3000);
                                                                                                        //JOptionPane.showMessageDialog(null, "Registro guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }

                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 1" );
                                                                                                System.out.println(e);
                                                                                                return;
                                                                                            }

                                                                                            try {
                                                                                                String estadoSalud = "INSERT INTO estado_salud_paciente (ESTA_SALU_DIAB,  ESTA_SALU_MIGR, ESTA_SALU_HIPE, ESTA_SALU_EMBA,"
                                                                                                        + "ESTA_SALU_VISI_LEJA, ESTA_SALU_VISI_CERC,  ESTA_SALU_VISI_BORR, ESTA_SALU_FOTO, ESTA_SALU_EXAM_ID) values(?,?,?,?,?,?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(estadoSalud);
                                                                                                    int diab;
                                                                                                    if (chkDiabetes.isSelected()) {
                                                                                                        diab = 1;
                                                                                                    } else {
                                                                                                        diab = 0;
                                                                                                    }
                                                                                                    pst.setString(1, Integer.toString(diab));
                                                                                                    int migr;
                                                                                                    if (chkMigraña.isSelected()) {
                                                                                                        migr = 1;
                                                                                                    } else {
                                                                                                        migr = 0;
                                                                                                    }
                                                                                                    pst.setString(2, Integer.toString(migr));
                                                                                                    int hipe;
                                                                                                    if (chkHipertension.isSelected()) {
                                                                                                        hipe = 1;
                                                                                                    } else {
                                                                                                        hipe = 0;
                                                                                                    }
                                                                                                    pst.setString(3, Integer.toString(hipe));
                                                                                                    int emba;
                                                                                                    if (chkEmbarazo.isSelected()) {
                                                                                                        emba = 1;
                                                                                                    } else {
                                                                                                        emba = 0;
                                                                                                    }
                                                                                                    pst.setString(4, Integer.toString(emba));
                                                                                                    int vlejana;
                                                                                                    if (rbVisionLejanaBuena.isSelected()) {
                                                                                                        vlejana = 1;
                                                                                                    } else {
                                                                                                        vlejana = 0;
                                                                                                    }
                                                                                                    pst.setString(5, Integer.toString(vlejana));

                                                                                                    int vcercana;
                                                                                                    if (rbVisionCercanaBuena.isSelected()) {
                                                                                                        vcercana = 1;
                                                                                                    } else {
                                                                                                        vcercana = 0;
                                                                                                    }
                                                                                                    pst.setString(6, Integer.toString(vcercana));

                                                                                                    int vborrosa;
                                                                                                    if (rbVisionBorrosaSi.isSelected()) {
                                                                                                        vborrosa = 1;
                                                                                                    } else {
                                                                                                        vborrosa = 0;
                                                                                                    }
                                                                                                    pst.setString(7, Integer.toString(vborrosa));

                                                                                                    int foto;
                                                                                                    if (rbFotofobiaSi.isSelected()) {
                                                                                                        foto = 1;
                                                                                                    } else {
                                                                                                        foto = 0;
                                                                                                    }
                                                                                                    pst.setString(8, Integer.toString(foto));

                                                                                                    pst.setString(9, lblExamenVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp2.setBackground(Color.GREEN);
                                                                                                        //  evt.wait(3000);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 2 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 2");
                                                                                                System.out.println(e);
                                                                                                //JOptionPane.showMessageDialog(null, "ahora va a borrar");
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String anexos = "INSERT INTO anexos (ANEX_PARP, ANEX_PANT, ANEX_MIOS, ANEX_EXAM_ID) VALUES (?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(anexos);
                                                                                                    String parpados = "";
                                                                                                    if (rbParpadeosBueno.isSelected()) {
                                                                                                        parpados = "B";
                                                                                                    } else if (rbParpadeosRegular.isSelected()) {
                                                                                                        parpados = "R";
                                                                                                    } else if (rbParpadeosMalo.isSelected()) {
                                                                                                        parpados = "M";
                                                                                                    }
                                                                                                    System.out.println(parpados + " este es el valor de parpados");
                                                                                                    pst.setString(1, parpados);

                                                                                                    String pantalleo = "";
                                                                                                    if (rbPantalleoBueno.isSelected()) {
                                                                                                        pantalleo = "B";
                                                                                                    } else if (rbPantalleoRegular.isSelected()) {
                                                                                                        pantalleo = "R";
                                                                                                    } else if (rbPantalleoMalo.isSelected()) {
                                                                                                        pantalleo = "M";
                                                                                                    }
                                                                                                    System.out.println(pantalleo + " este es el valor de pantalleo");
                                                                                                    pst.setString(2, pantalleo);
                                                                                                    String miosis = "";
                                                                                                    if (rbMiosisBueno.isSelected()) {
                                                                                                        miosis = "B";
                                                                                                    } else if (rbMiosisRegular.isSelected()) {
                                                                                                        miosis = "R";
                                                                                                    } else if (rbMiosisMalo.isSelected()) {
                                                                                                        miosis = "M";
                                                                                                    }
                                                                                                    System.out.println(miosis + " este es el valor de miosis");
                                                                                                    pst.setString(3, miosis);
                                                                                                    pst.setString(4, lblExamenVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp3.setBackground(Color.GREEN);
                                                                                                        //evt.wait(3000);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 3 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 3");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String agudeza = "INSERT INTO agudeza_visual (AGUD_ID,AGUD_EXAM_ID) VALUES (?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(agudeza);
                                                                                                    try {
                                                                                                        String sql = "SELECT MAX(AGUD_ID) AS id FROM agudeza_visual";
                                                                                                        int valorId, idNuevo;

                                                                                                        String[] datosId = new String[1];

                                                                                                        java.sql.Statement st = cn.createStatement();
                                                                                                        ResultSet rs = st.executeQuery(sql);
                                                                                                        while (rs.next()) {
                                                                                                            datosId[0] = rs.getString(1);
                                                                                                        }

                                                                                                        String recibir = datosId[0];

                                                                                                        System.out.println(recibir + " valor obtenido bd");
                                                                                                        if (recibir.equals(null)) {
                                                                                                            idNuevo = 1;
                                                                                                            lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
                                                                                                        } else {
                                                                                                            valorId = Integer.parseInt(recibir);
                                                                                                            idNuevo = valorId + 1;
                                                                                                            // Formatter fmt = new Formatter();
                                                                                                            // fmt.format("%08d",idNuevo);
                                                                                                            //System.out.println(fmt+"numero formateado");
                                                                                                            lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
                                                                                                        }
                                                                                                    } catch (Exception ex) {
                                                                                                        System.out.println(ex);
                                                                                                        String nl = System.getProperty("line.separator");
                                                                                                        JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
                                                                                                                + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
                                                                                                        lblIdAgudezaVisual.setText(Integer.toString(1));
                                                                                                    }
                                                                                                    pst.setString(1, lblIdAgudezaVisual.getText());
                                                                                                    pst.setString(2, lblExamenVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp4.setBackground(Color.GREEN);
                                                                                                        //  JOptionPane.showMessageDialog(null, "Registro 4 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 4");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String lejos = "INSERT INTO av_lejos (LEJO_OD, LEJO_OI, LEJO_AO, LEJO_AGUD_ID) VALUES (?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(lejos);
                                                                                                    pst.setString(1, cbLejosOD.getSelectedItem().toString());
                                                                                                    pst.setString(2, cbLejosOI.getSelectedItem().toString());
                                                                                                    pst.setString(3, cbLejosAO.getSelectedItem().toString());
                                                                                                    pst.setString(4, lblIdAgudezaVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp5.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 5 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 5");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String agujero = "INSERT INTO agujero (AGUJ_OD, AGUJ_OI, AGUJ_AO, AGUJ_AGUD_ID) VALUES (?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(agujero);
                                                                                                    pst.setString(1, cbAgujeroOD.getSelectedItem().toString());
                                                                                                    pst.setString(2, cbAgujeroOI.getSelectedItem().toString());
                                                                                                    pst.setString(3, cbAgujeroAO.getSelectedItem().toString());
                                                                                                    pst.setString(4, lblIdAgudezaVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp6.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 6 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 6");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String rx = "INSERT INTO rx_anterior (RXAN_OD, RXAN_OI, RXAN_AO, RXAN_AGUD_ID) VALUES (?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(rx);
                                                                                                    pst.setString(1, cbRXAnteriorOD.getSelectedItem().toString());
                                                                                                    pst.setString(2, cbRXAnteriorOI.getSelectedItem().toString());
                                                                                                    pst.setString(3, cbRXAnteriorAO.getSelectedItem().toString());
                                                                                                    pst.setString(4, lblIdAgudezaVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp7.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 7 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 7");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String crx = "INSERT INTO crx_final (CRXF_OD, CRXF_OI, CRXF_AO, CRXF_AGUD_ID) VALUES (?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(crx);
                                                                                                    pst.setString(1, cbAVRXAnteriorOD.getSelectedItem().toString());
                                                                                                    pst.setString(2, cbAVRXAnteriorOI.getSelectedItem().toString());
                                                                                                    pst.setString(3, cbAVRXAnteriorAO.getSelectedItem().toString());
                                                                                                    pst.setString(4, lblIdAgudezaVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp8.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 8 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 8");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String rxFinal = "INSERT INTO rx_final (RXFI_ESFE_OD, RXFI_ESFE_OI, RXFI_CILI_OD, RXFI_CILI_OI, RXFI_EJE_OD, RXFI_EJE_OI, RXFI_ADD_OD, RXFI_ADD_OI, RXFI_PRIS_OD, RXFI_PRIS_OI, RXFI_POSI_OD, RXFI_POSI_OI, RXFI_AGUD_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[15];
                                                                                                if (datos[0] == null) {

                                                                                                    PreparedStatement pst = cn.prepareStatement(rxFinal);
                                                                                                    pst.setString(1, txtEsferaOD.getText());
                                                                                                    pst.setString(2, txtEsferaOI.getText());
                                                                                                    pst.setString(3, txtCilindroOD.getText());
                                                                                                    pst.setString(4, txtCilindroOI.getText());
                                                                                                    pst.setString(5, txtEjeOD.getText());
                                                                                                    pst.setString(6, txtEjeOI.getText());
                                                                                                    pst.setString(7, txtADDOD.getText());
                                                                                                    pst.setString(8, txtADDOI.getText());
                                                                                                    pst.setString(9, txtPrismaOD.getText());
                                                                                                    pst.setString(10, txtPrismaOI.getText());
                                                                                                    pst.setString(11, cbPocisionOD.getSelectedItem().toString());
                                                                                                    pst.setString(12, cbPocisionOI.getSelectedItem().toString());
                                                                                                    pst.setString(13, lblIdAgudezaVisual.getText());

                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp9.setBackground(Color.GREEN);
                                                                                                        //  jp10.setBackground(Color.GREEN);
                                                                                                        //  Alerta_Guardar.dispose();
                                                                                                        JOptionPane.showMessageDialog(null, "Registro guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                        LimpiarVentanaPrincipalPaciente();
                                                                                                        LimpiarPanelesAnexos();
                                                                                                        String sql = "SELECT MAX(EXAM_ID) AS id FROM examen_paciente";
                                                                                                        int valorId, idNuevo;

                                                                                                        try {
                                                                                                            Conexionbd c2 = new Conexionbd();
                                                                                                            java.sql.Connection cn2 = c2.conexion();
                                                                                                            String[] datosId = new String[1];

                                                                                                            java.sql.Statement st = cn2.createStatement();
                                                                                                            ResultSet rs = st.executeQuery(sql);
                                                                                                            while (rs.next()) {
                                                                                                                datosId[0] = rs.getString(1);
                                                                                                            }

                                                                                                            String recibir = datosId[0];
                                                                                                            cn2.close();
                                                                                                            System.out.println(recibir + " valor obtenido bd");
                                                                                                            if (recibir.equals(null)) {
                                                                                                                idNuevo = 1;
                                                                                                                lblExamenVisual.setText(Integer.toString(idNuevo));
                                                                                                            } else {
                                                                                                                valorId = Integer.parseInt(recibir);
                                                                                                                idNuevo = valorId + 1;
                                                                                                                // Formatter fmt = new Formatter();
                                                                                                                // fmt.format("%08d",idNuevo);
                                                                                                                //System.out.println(fmt+"numero formateado");
                                                                                                                lblExamenVisual.setText(Integer.toString(idNuevo));
                                                                                                            }
                                                                                                        } catch (Exception ex) {
                                                                                                            System.out.println(ex);
                                                                                                            String nl = System.getProperty("line.separator");
                                                                                                            JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
                                                                                                                    + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
                                                                                                            lblExamenVisual.setText(Integer.toString(1));
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 9 RX Final");
                                                                                                System.out.println(e);
                                                                                                try {

                                                                                                    String id = "";
                                                                                                    id = lblExamenVisual.getText();
                                                                                                    Conexionbd cc = new Conexionbd();
                                                                                                    Connection cn = cc.conexion();

                                                                                                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM examen_paciente WHERE EXAM_ID='" + id + "'");
                                                                                                    pst.executeUpdate();
                                                                                                    cn.close();

                                                                                                } catch (Exception ex) {
                                                                                                    System.out.println(ex);
                                                                                                }
                                                                                                return;

                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }//GEN-LAST:event_btnGuardarExamenVisualActionPerformed

    private void txtPaternoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPaternoKeyReleased
        LetraCapital(evt, txtPaterno);
    }//GEN-LAST:event_txtPaternoKeyReleased

    private void txtMaternoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMaternoKeyReleased
        LetraCapital(evt, txtMaterno);
    }//GEN-LAST:event_txtMaternoKeyReleased

    private void txtDireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireActionPerformed

    private void txtTeleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTeleActionPerformed

    private void txtMailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMailActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed

    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombreKeyReleased
        LetraCapital(evt, txtNombre);
    }//GEN-LAST:event_txtNombreKeyReleased

    private void txtTeleCasaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTeleCasaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTeleCasaActionPerformed

    private void txtEdadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEdadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEdadActionPerformed

    private void chkEstaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkEstaActionPerformed
        if (chkEsta.isSelected() == true) {
            pnlImag.setBackground(new java.awt.Color(0, 204, 0));
            chkEsta.setText("CLIENTE ACTIVO");

        } else {
            pnlImag.setBackground(new java.awt.Color(153, 0, 0));
            chkEsta.setText("CLIENTE INACTIVO");
        }
    }//GEN-LAST:event_chkEstaActionPerformed

    private void chkEstaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chkEstaKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_chkEstaKeyReleased

    private void txtOcupacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOcupacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOcupacionActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        Limpiar();
        lblFechaCliente.setText("");
        AgregarCliente.dispose();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        Conexionbd cc = new Conexionbd();
        Connection cn = cc.conexion();
        String nom, pate, mate, dire, tele, mail, fnac, suel, edad, lastName, teleCasa, ocupacion;
        int gene, pues, esta, cate = 0;
        String formato = "yyyy-MM-dd";
         try {
        fnac = lblFechaCliente.getText();
            if (txtTeleCasa.equals(null)) {
                teleCasa = "";
            } else {
                teleCasa = txtTeleCasa.getText();
            }

            if (txtOcupacion.equals(null)) {
                ocupacion = "";
            } else {
                ocupacion = txtOcupacion.getText();
            }

            String sql, sqlIdP = "";

            nom = txtNombre.getText();
            if (nom.length() == 0) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre del cliente");
                txtNombre.requestFocus();
            } else if (nom.length() < 3) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre del cliente correctamente");
                txtNombre.requestFocus();
            } else {
                pate = txtPaterno.getText();
                if (pate.length() == 0) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno del cliente");
                    txtPaterno.requestFocus();
                } else if (pate.length() < 3) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno correctamente");
                    txtPaterno.requestFocus();
                } else {
                    mate = txtMaterno.getText();
                    if (mate.length() == 0) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido materno del cliente");
                        txtMaterno.requestFocus();
                    } else if (mate.length() < 3) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido materno correctamente");
                        txtMaterno.requestFocus();
                    } else {
                        dire = txtDire.getText();
                        if (dire.length() == 0) {
                            String nl = System.getProperty("line.separator");
                            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar la dirección del cliente");
                            txtDire.requestFocus();
                        } else if (dire.length() < 8) {
                            String nl = System.getProperty("line.separator");
                            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar una dirección correcta" + nl + "mínimo 8 caracteres");
                            txtDire.requestFocus();
                        } else {
                            tele = txtTele.getText();
                            if (tele.length() == 0) {
                                String nl = System.getProperty("line.separator");
                                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el télefono del cliente");
                                txtTele.requestFocus();
                            } else if (tele.length() < 10) {
                                String nl = System.getProperty("line.separator");
                                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar un número de teléfono correcto");
                                txtTele.requestFocus();
                            } else {
                                mail = txtMail.getText();
                                ValidaCorreo(mail);

                                if (mail.length() == 0) {
                                    String nl = System.getProperty("line.separator");
                                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el correo electrónico del cliente" + nl + "si no cuenta con alguno, escribir la palabra '@Cero' o '@ninguno' o simplemente '@' y despues Guardar");
                                    txtMail.requestFocus();

                                } else {
                                    edad = txtEdad.getText();
                                    if (edad.length() == 0) {
                                        String nl = System.getProperty("line.separator");
                                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar la edad aproximada del cliente");
                                        txtEdad.requestFocus();
                                    } else {
                                        gene = cbxGenero.getSelectedIndex();
                                        if (cbxGenero.getSelectedItem().equals("SELECCIONA:")) {
                                            String nl = System.getProperty("line.separator");
                                            JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el genero del cliente");
                                            cbxGenero.requestFocus();

                                        }else {
                                        cate = cbxCategoriaPaciente.getSelectedIndex();
                                        if (cbxCategoriaPaciente.getSelectedItem().equals("--Selecciona--")) {
                                            String nl = System.getProperty("line.separator");
                                            JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar la categoría del cliente");
                                            cbxCategoriaPaciente.requestFocus();

                                        } else {

                                            System.out.println("Entrada->" + fnac);
                                            DateFormat inputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                                            java.util.Date date2 = null;

                                            try {
                                                date2 = inputFormatter.parse(fnac);
                                            } catch (ParseException pex) {
                                                pex.printStackTrace();
                                            }

                                            DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                                            String salida = outputFormatter.format(date2);
                                            System.out.println("Salida->" + salida);
                                            fnac = salida;

                                        String[] datos = new String[15];

                                        try {
//                                            if (chkEsta.isSelected()) {
//
//                                                esta = 1;
//                                            } else {
//                                                esta = 2;
//                                                pnlImag.setBackground(new java.awt.Color(204, 0, 0));
//                                            }
//                                            if (esta == 2) {
//                                                JOptionPane.showMessageDialog(null, "Ha dejado el cliente en su estatus inactivo");
//                                            }
                                            PreparedStatement pst;
//                                            pst = cn.prepareStatement("UPDATE paciente SET PACI_NOMB='" + nom + "',PACI_PATE='" + pate + "',PACI_MATE='" + mate + "',PACI_DIRE='" + dire + "',PACI_TELE_CASA='" + teleCasa + "',PACI_OCUP='" + ocupacion + "',"
//                                                    + "PACI_TELE_CELU='" + tele + "',PACI_MAIL='" + mail + "',PACI_FECH_REGI='" + fnac + "',PACI_SEXO_ID='" + gene + "',PACI_EDAD='" + edad + "',PACI_ESTA_ID='" + esta + "',PACI_CATE_ID='" + cate + "' WHERE PACI_ID='" + lblId.getText() + "'");
                                            
                                             pst = cn.prepareStatement("UPDATE paciente SET PACI_NOMB='" + nom + "',PACI_PATE='" + pate + "',PACI_MATE='" + mate + "',PACI_DIRE='" + dire + "',PACI_TELE_CASA='" + teleCasa + "',PACI_OCUP='" + ocupacion + "',"
                                                    + "PACI_TELE_CELU='" + tele + "',PACI_MAIL='" + mail + "',PACI_FECH_REGI='" + fnac + "',PACI_SEXO_ID='" + gene + "',PACI_EDAD='" + edad + "',PACI_CATE_ID='" + cate + "' WHERE PACI_ID='" + lblId.getText() + "'");
                                            int n = pst.executeUpdate();
                                            if (n > 0) {
                                                int idNuevo = 0;
                                                JOptionPane.showMessageDialog(null, "Registro modificado con éxito");
                                                if (lblCategoriaCliente.getText() == "PACIENTE") {
                                                    try {
                                                        String query = "SELECT MAX(PACI_ID) AS id FROM PACIENTE";

                                                        String[] datosId = new String[1];

                                                        java.sql.Statement st = cn.createStatement();
                                                        ResultSet rs = st.executeQuery(query);
                                                        while (rs.next()) {
                                                            datosId[0] = rs.getString(1);
                                                        }
                                                        cn.close();

                                                        String recibir = datosId[0];

                                                        System.out.println(recibir + " valor obtenido bd");
                                                        if (recibir.equals(null)) {
                                                            idNuevo = 0;
                                                            //lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
                                                        } else {
                                                            idNuevo = Integer.parseInt(recibir);

                                                            // Formatter fmt = new Formatter();
                                                            // fmt.format("%08d",idNuevo);
                                                            //System.out.println(fmt+"numero formateado");
                                                            //lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
                                                        }
                                                    } catch (Exception ex) {
                                                        System.out.println(ex);
                                                        JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de pacientes");
                                                    }
                                                    int num = Integer.parseInt(lblId.getText());
                                                    if (num < idNuevo) {
                                                        colocaPacienteModificado();
                                                        System.out.println(num + "id del paciente");
                                                        System.out.println(idNuevo + "id recuperado");
                                                    } else {
                                                        ColocarPaciente();
//                                                    Historia_clinica hc=new Historia_clinica();
                                                    }
                                                    AgregarCliente.dispose();
//                                                    hc.setVisible(true);
//                                                    hc.ColocarPaciente();

                                                    Limpiar();
                                                    btnGuardarPaciente.setEnabled(true);
//                                                    this.dispose();
                                                }
                                              // else
                                               //     colocaPacienteModificado();
                                              //  mostrardatosPorId(lblId.getText());
                                            } else {
                                                JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                            }

                                        } catch (Exception e) {
                                            JOptionPane.showMessageDialog(null, "¡Error! no ha sido posible conectar ala base de datos");
                                            System.out.println(e);
                                        }

                                    }
                                }
                            }
                        }

                    }
                }
              }
            }
        }
       
            // mostrardatosPorId(ele);
        } catch (Exception ex) {
            Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
        }
        //supuestamente debería de elegir automaticamente la celda del elemento que trae a id pero no lo hace
        /* tbEmpleado.getUpdateSelectionOnSort();
         for (int i = 0; i < tbEmpleado.getRowCount(); i++) {
         if (tbEmpleado.getValueAt(i, 1).equals(ele)) {
         tbEmpleado.changeSelection(i, 1, true, true);
         break;
         }
         }*/
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnGuardarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPacienteActionPerformed
        //boton agregar
        Conexionbd cc = new Conexionbd();
        Connection cn = cc.conexion();
        String nom, pate, mate, dire, tele, mail, fnac, suel, edad, lastName, teleCasa, ocupacion;
        int gene, esta, puesId, cate= 0;
        String formato = "yyyy-MM-dd";
        try {
            fnac = lblFechaCliente.getText();
            if (txtTeleCasa.equals(null)) {
                teleCasa = "";
            } else {
                teleCasa = txtTeleCasa.getText();
            }

            if (txtOcupacion.equals(null)) {
                ocupacion = "";
            } else {
                ocupacion = txtOcupacion.getText();
            }

            String sql, sqlIdP = "";

            nom = txtNombre.getText();
            if (nom.length() == 0) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre del cliente");
                txtNombre.requestFocus();
            } else if (nom.length() < 3) {
                String nl = System.getProperty("line.separator");
                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el nombre del cliente correctamente");
                txtNombre.requestFocus();
            } else {
                pate = txtPaterno.getText();
                if (pate.length() == 0) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno del cliente");
                    txtPaterno.requestFocus();
                } else if (pate.length() < 3) {
                    String nl = System.getProperty("line.separator");
                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido paterno correctamente");
                    txtPaterno.requestFocus();
                } else {
                    mate = txtMaterno.getText();
                    if (mate.length() == 0) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido materno del cliente");
                        txtMaterno.requestFocus();
                    } else if (mate.length() < 3) {
                        String nl = System.getProperty("line.separator");
                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el apellido materno correctamente");
                        txtMaterno.requestFocus();
                    } else {
                        dire = txtDire.getText();
                        if (dire.length() == 0) {
                            String nl = System.getProperty("line.separator");
                            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar la dirección del cliente");
                            txtDire.requestFocus();
                        } else if (dire.length() < 8) {
                            String nl = System.getProperty("line.separator");
                            JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar una dirección correcta" + nl + "mínimo 8 caracteres");
                            txtDire.requestFocus();
                        } else {
                            tele = txtTele.getText();
                            if (tele.length() == 0) {
                                String nl = System.getProperty("line.separator");
                                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el télefono del cliente");
                                txtTele.requestFocus();
                            } else if (tele.length() < 10) {
                                String nl = System.getProperty("line.separator");
                                JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar un número de teléfono correcto");
                                txtTele.requestFocus();
                            } else {
                                mail = txtMail.getText();
                                ValidaCorreo(mail);

                                if (mail.length() == 0) {
                                    String nl = System.getProperty("line.separator");
                                    JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar el correo electrónico del cliente" + nl + "si no cuenta con alguno, escribir la palabra '@Cero' o '@ninguno' o simplemente '@' y despues Guardar");
                                    txtMail.requestFocus();

                                } else {
                                    edad = txtEdad.getText();
                                    if (edad.length() == 0) {
                                        String nl = System.getProperty("line.separator");
                                        JOptionPane.showMessageDialog(null, "¡Error! Debe ingresar la edad aproximada del cliente");
                                        txtEdad.requestFocus();
                                    } else {
                                        gene = cbxGenero.getSelectedIndex();
                                        if (cbxGenero.getSelectedItem().equals("SELECCIONA:")) {
                                            String nl = System.getProperty("line.separator");
                                            JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar el genero del cliente");
                                            cbxGenero.requestFocus();

                                        }else {
                                        cate = cbxCategoriaPaciente.getSelectedIndex();
                                        if (cbxCategoriaPaciente.getSelectedItem().equals("--Selecciona--")) {
                                            String nl = System.getProperty("line.separator");
                                            JOptionPane.showMessageDialog(null, "¡Error! Debe seleccionar la categoría del cliente");
                                            cbxCategoriaPaciente.requestFocus();

                                        } else {

                                            System.out.println("Entrada->" + fnac);
                                            DateFormat inputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                                            java.util.Date date2 = null;

                                            try {
                                                date2 = inputFormatter.parse(fnac);
                                            } catch (ParseException pex) {
                                                pex.printStackTrace();
                                            }

                                            DateFormat outputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                                            String salida = outputFormatter.format(date2);
                                            System.out.println("Salida->" + salida);
                                            fnac = salida;

                                            sql = "INSERT INTO PACIENTE (PACI_NOMB,PACI_PATE,PACI_MATE,PACI_DIRE,PACI_TELE_CASA,PACI_TELE_CELU,PACI_MAIL,PACI_FECH_REGI,PACI_SEXO_ID,PACI_EDAD,PACI_ESTA_ID,PACI_CATE_ID,PACI_OCUP) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";

                                            String[] datos = new String[12];
                                            if (datos[0] == null) {
                                                try {
                                                    PreparedStatement pst = cn.prepareStatement(sql);

                                                    pst.setString(1, nom);
                                                    pst.setString(2, pate);
                                                    pst.setString(3, mate);
                                                    pst.setString(4, dire);
                                                    pst.setString(5, teleCasa);
                                                    pst.setString(6, tele);
                                                    pst.setString(7, mail);
                                                    pst.setString(8, fnac);
                                                    pst.setString(9, Integer.toString(gene));
                                                    pst.setString(10, edad);
                                                    if (chkEsta.isSelected()) {

                                                        esta = 1;
                                                    } else {
                                                        esta = 2;
                                                        pnlImag.setBackground(new java.awt.Color(204, 0, 0));
                                                    }
                                                    if (esta == 2) {
//                                                        JOptionPane.showMessageDialog(null, "Ha dejado el cliente en su estatus inactivo");
                                                    }

                                                    pst.setString(11, Integer.toString(esta));

//                                                    if (lblCategoriaCliente.getText() == "PACIENTE") {
//                                                        pst.setString(12, Integer.toString(1));
//                                                    } else {
//                                                        pst.setString(12, Integer.toString(2));
//                                                    }
                                                     pst.setString(12, Integer.toString(cate));
                                                    pst.setString(13, ocupacion);

                                                    int n = pst.executeUpdate();

                                                    if (n > 0) {
                                                        JOptionPane.showMessageDialog(null, "Registro guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                        try {
                                                            if (lblCategoriaCliente.getText() == "PACIENTE") {
                                                                ColocarPaciente();
                                                                AgregarCliente.dispose();
                                                                chkDiabetes.requestFocus();
                                                                Limpiar();

                                                                //Se actualiza el id del examen visual y se limpia todos los demas campos para dejar libre para un nuevo examen
                                                                //if(btnGuardarPaciente.doClick()=true)
                                                                String sqlIdExamenVisual = "SELECT MAX(EXAM_ID) AS id FROM examen_paciente";
                                                                int valorId, idNuevo;

                                                                try {
 //           Conexionbd cc = new Conexionbd();
                                                                    //           java.sql.Connection cn = cc.conexion();
                                                                    String[] datosId = new String[1];

                                                                    java.sql.Statement st = cn.createStatement();
                                                                    ResultSet rs = st.executeQuery(sqlIdExamenVisual);
                                                                    while (rs.next()) {
                                                                        datosId[0] = rs.getString(1);
                                                                    }

                                                                    String recibir = datosId[0];
                                                                    cn.close();
                                                                    System.out.println(recibir + " valor obtenido bd");
                                                                    if (recibir.equals(null)) {
                                                                        idNuevo = 1;
                                                                        lblExamenVisual.setText(Integer.toString(idNuevo));
                                                                    } else {
                                                                        valorId = Integer.parseInt(recibir);
                                                                        idNuevo = valorId + 1;
                // Formatter fmt = new Formatter();
                                                                        // fmt.format("%08d",idNuevo);
                                                                        //System.out.println(fmt+"numero formateado");
                                                                        lblExamenVisual.setText(Integer.toString(idNuevo));
                                                                        LimpiarExamen();
                                                                        // LimpiarVentanaPrincipalPaciente();
                                                                        LimpiarPanelesAnexos();
                                                                        PaginaExamenVisible(false);
                                                                        cn.close();
                                                                    }
                                                                } catch (Exception ex) {
                                                                    System.out.println(ex);
                                                                    String nl = System.getProperty("line.separator");
                                                                    JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
                                                                            + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
                                                                    lblExamenVisual.setText(Integer.toString(1));
                                                                }
                                                            }
//                                                            else{
//                                                                mostrardatos(txtNombre.getText() + " " + txtPaterno.getText() + " " + txtMaterno.getText());
//                                                                Limpiar();
//                                                            }
                                                        } catch (Exception ex) {
                                                            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                                                        }
                                                    } else {
                                                        JOptionPane.showMessageDialog(null, "¡Error! no se pudo guardar el registro");

                                                    }

                                                } catch (Exception e) {
                                                    JOptionPane.showMessageDialog(null, "¡Error! no ha sido posible conectar ala base de datos");
                                                    System.out.println(e);
                                                }

                                            }

                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                }
            }
        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, "Al menos selecciona una fecha válida!", "Error!", JOptionPane.ERROR_MESSAGE);
            System.out.println(ex);
        }
    }//GEN-LAST:event_btnGuardarPacienteActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void cbLejosOD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLejosOD1ActionPerformed
        int indice = cbLejosOD1.getSelectedIndex();
        cbLejosOD.setSelectedIndex(indice);
    }//GEN-LAST:event_cbLejosOD1ActionPerformed

    private void cbAgujeroAO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAgujeroAO1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAgujeroAO1ActionPerformed

    private void txtEsferaOI1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEsferaOI1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEsferaOI1ActionPerformed

    private void cbPocisionOD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPocisionOD1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPocisionOD1ActionPerformed

    private void btnExtenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtenderActionPerformed
        NuevaVenta.setModal(true);
        NuevaVenta.setSize(1320, 690);
        NuevaVenta.setLocationRelativeTo(null);
        NuevaVenta.setVisible(true);
    }//GEN-LAST:event_btnExtenderActionPerformed

    private void btnBuscarPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPacientesActionPerformed
        try {
            AutoCompleteDecorator.decorate(cbxBuscarPaciente);

            try {
                Object[] llenar_combo_puesto = con.combox("PACIENTE ORDER BY PACI_NOMB ASC", "concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE)");

                cbxBuscarPaciente.removeAllItems();
                for (int i = 0; i < llenar_combo_puesto.length; i++) {

                    cbxBuscarPaciente.addItem((String) llenar_combo_puesto[i]);

                }
            } catch (Exception e) {
                System.out.println(e);
            }

            BuscarPaciente.setModal(true);
            BuscarPaciente.setSize(550, 350);
            BuscarPaciente.setLocationRelativeTo(null);
            cbxBuscarPaciente.requestFocus();
            BuscarPaciente.setVisible(true);
            // iniciar();

        } catch (Exception ex) {
            System.out.println(ex);
        }

    }//GEN-LAST:event_btnBuscarPacientesActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        jp1.setBackground(Color.GREEN);
        jp2.setBackground(Color.GREEN);
        jp3.setBackground(Color.GREEN);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void cbxBuscarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxBuscarPacienteActionPerformed
        try {
            String sql = "";
            sql = "select PACI_DIRE, PACI_TELE_CELU, PACI_FECH_REGI, PACI_ID from PACIENTE WHERE concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE)='" + cbxBuscarPaciente.getSelectedItem() + "'";
            String[] datos = new String[6];

            Conexionbd cc = new Conexionbd();
            Connection cn = (Connection) cc.conexion();
            Statement st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                String direccion = rs.getString(1);
                lblDireccionColocar.setText(direccion);
                String celular = rs.getString(2);
                lblCelularColocar.setText(celular);
                String tomarfecha = rs.getString(3);
                System.out.println("Entrada->" + tomarfecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                lblFechaDeRegistro.setText(salida);
                String id = rs.getString(4);
                lblIdColocar.setText(id);

            }

            cn.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_cbxBuscarPacienteActionPerformed

    private void btnTodosPacientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTodosPacientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTodosPacientesActionPerformed

    private void btnColocarPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColocarPacienteActionPerformed
        try {
            String query = "SELECT P.PACI_ID, concat_ws(' ',P.PACI_NOMB, P.PACI_PATE, P.PACI_MATE), P.PACI_DIRE, P.PACI_FECH_REGI, P.PACI_TELE_CASA, P.PACI_TELE_CELU, S.SEXO_NOMB, P.PACI_EDAD, PACI_MAIL, P.PACI_OCUP FROM PACIENTE AS P INNER JOIN SEXO AS S ON PACI_SEXO_ID=SEXO_ID WHERE concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE)='" + cbxBuscarPaciente.getSelectedItem() + "'";
            String[] datos = new String[12];

            Conexionbd cc = new Conexionbd();
            Connection cn = (Connection) cc.conexion();
            Statement st = (Statement) cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                String idPaciente = rs.getString(1);
                lblIdPaciente.setText(idPaciente);
                String nombre = rs.getString(2);
                txtNombreExamen.setText(nombre);
                String direccion = rs.getString(3);
                txtDireccionExamen.setText(direccion);
                String tomarfecha = rs.getString(4);
                System.out.println("Entrada->" + tomarfecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                txtFechaExamen.setText(salida);
                String telCasa = rs.getString(5);
                txtTelCasaExamen.setText(telCasa);
                String celular = rs.getString(6);
                txtTelCelExamen.setText(celular);
                String sexo = rs.getString(7);
                if (sexo.equals("MASCULINO")) {
                    sexo = "M";
                } else {
                    sexo = "F";
                }
                txtSexoExamen.setText(sexo);
                String edad = rs.getString(8);
                txtEdadExamen.setText(edad);
                String mail = rs.getString(9);
                txtMailExamen.setText(mail);
                String ocupacion = rs.getString(10);
                txtOcupacionExamen.setText(ocupacion);

            }

            cn.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }
        BuscarPaciente.dispose();
        lblDireccionColocar.setText("");
        cbxBuscarPaciente.removeAllItems();
        lblCelularColocar.setText("");
        lblFechaDeRegistro.setText("");
        lblIdColocar.setText("");
        CargarUltimoIdExamenPaciente();
        LimpiarExamen();
    }//GEN-LAST:event_btnColocarPacienteActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //LimpiarPaciente();
        LimpiarVentanaPrincipalPaciente();
        LimpiarPanelesAnexos();
        LimpiarExamen();
        PaginaExamenVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        ColocarExamen();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void btnVerExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerExamenActionPerformed
        String tomarfecha;
        boolean permiso = false;
        int[] anchos = {10, 60, 60, 120, 60};
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("ID");
        modelo.addColumn("FECHA DE CAPTURA");
        modelo.addColumn("ULTIMA MODIFICACIÓN");
        modelo.addColumn("OBSERVACIONES");
        modelo.addColumn("OPTOMETRISTA");
        tblExamenVisual.setModel(modelo);
        for (int i = 0; i < tblExamenVisual.getColumnCount(); i++) {
            tblExamenVisual.getColumnModel().getColumn(i).setPreferredWidth(anchos[i]);
        }
        int valor = Integer.parseInt(lblIdColocar.getText());
        String sql = "SELECT EXAM_ID, concat_ws(' ',PACI_NOMB, PACI_PATE, PACI_MATE), EXAM_FECH, EXAM_ULTI_MODI, EXAM_OBSE, USUA_NOMB FROM EXAMEN_PACIENTE INNER JOIN PACIENTE INNER JOIN USUARIOS ON EXAM_PACI_ID=PACI_ID AND EXAM_USUA_ID=USUA_ID WHERE EXAM_PACI_ID='" + valor + "' ORDER BY EXAM_FECH";
        String[] datos = new String[15];
        try {

            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                datos[0] = rs.getString(1);
                String nombre = rs.getString(2);
                lblNombreCompleto.setText(nombre);
                tomarfecha = rs.getString(3);
                Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                int hora, minutos, segundos;
                hora = calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                System.out.println("Entrada->" + tomarfecha + " " + hora + ":" + minutos);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha + " " + hora + ":" + minutos);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                datos[1] = salida;
                datos[2] = rs.getString(4);
                datos[3] = rs.getString(5);
                datos[4] = rs.getString(6);

                modelo.addRow(datos);
                permiso = true;
            }

            cn.close();

        } catch (SQLException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }
        if (permiso == true) {
            BuscarExamen.setModal(true);
            BuscarExamen.setSize(750, 286);
            BuscarExamen.setLocationRelativeTo(null);
            BuscarExamen.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "No se han realizado examenes para este paciente");
        }
    }//GEN-LAST:event_btnVerExamenActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Conexionbd cc = null;
        try {
            cc = new Conexionbd();
        } catch (Exception ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            String id = "";
            id = lblIdColocar.getText();
            java.sql.Connection cn = cc.conexion();
            int dato = JOptionPane.showConfirmDialog(null, login.Guardausuario + "  ¿Estas seguro de eliminar este registro?", "Alerta!", JOptionPane.YES_NO_OPTION);
            if (dato == 0) {
                try {
                    java.sql.PreparedStatement pst = cn.prepareStatement("DELETE FROM PACIENTE WHERE PACI_ID='" + id + "'");
                    pst.executeUpdate();

                    AutoCompleteDecorator.decorate(cbxBuscarPaciente);

                    try {
                        Object[] llenar_combo_puesto = con.combox("PACIENTE", "concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE)");

                        cbxBuscarPaciente.removeAllItems();
                        for (int i = 0; i < llenar_combo_puesto.length; i++) {

                            cbxBuscarPaciente.addItem((String) llenar_combo_puesto[i]);

                        }
                    } catch (Exception e) {
                        System.out.println(e);
                    }

                } catch (Exception e) {
                }
                cn.close();
                lblDireccionColocar.setText("");
                lblCelularColocar.setText("");
                lblFechaDeRegistro.setText("");
                lblIdColocar.setText("");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "¡Error! no ha seleccionado ningun ID de la lista de abajo");

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        String validarPaciente = txtNombreExamen.getText();
        if (validarPaciente.equals("")) {
            String nl = System.getProperty("line.separator");
            JOptionPane.showMessageDialog(null, "¡Error! No se puede guardar información sin paciente" + nl + "Por favor agrega un nuevo paciente para continuar...");
            btnAgregar.requestFocus();
        } else {
            if (bgVisionLejana.isSelected(null)) {
                JOptionPane.showMessageDialog(null, "¡Error! Debes elegir el tipo de visión lejana del paciente");
                rbVisionLejanaBuena.requestFocus();
            } else {
                if (bgVisionBorrosa.isSelected(null)) {
                    JOptionPane.showMessageDialog(null, "¡Error! Indica si el paciente presenta visión borrosa");
                    rbVisionBorrosaSi.requestFocus();
                } else {
                    if (bgVisionCercana.isSelected(null)) {
                        JOptionPane.showMessageDialog(null, "¡Error! Debes elegir el tipo de visión cercana del paciente");
                        rbVisionCercanaBuena.requestFocus();
                    } else {
                        if (bgFotofobia.isSelected(null)) {
                            JOptionPane.showMessageDialog(null, "¡Error! Debes indicar si el paciente presenta sintomas de Fotofobia");
                            rbFotofobiaSi.requestFocus();
                        } else {
                            if (bgParpadeos.isSelected(null)) {
                                JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de parpadeos y pestañeos del paciente");
                                rbParpadeosBueno.requestFocus();
                            } else {
                                if (bgPantalleo.isSelected(null)) {
                                    JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de pantalleos del paciente");
                                    rbPantalleoBueno.requestFocus();
                                } else {
                                    if (bgMiosis.isSelected(null)) {
                                        JOptionPane.showMessageDialog(null, "¡Error! Elige el tipo de miosis y midrasis del paciente");
                                        rbMiosisBueno.requestFocus();
                                    } else {
                                        if (cbRXAnteriorOD.getSelectedItem().equals("Elija opción:")) {
                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior OD seleccionando un valor de la lista");
                                            cbRXAnteriorOD.requestFocus();
                                        } else {
                                            if (cbRXAnteriorOI.getSelectedItem().equals("Elija opción:")) {
                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior OI seleccionando un valor de la lista");
                                                cbRXAnteriorOI.requestFocus();
                                            } else {
                                                if (cbRXAnteriorAO.getSelectedItem().equals("Elija opción:")) {
                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Con RX anterior AO seleccionando un valor de la lista");
                                                    cbRXAnteriorAO.requestFocus();
                                                } else {
                                                    if (cbAgujeroOD.getSelectedItem().equals("Elija opción:")) {
                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico OD seleccionando un valor de la lista");
                                                        cbAgujeroOD.requestFocus();
                                                    } else {
                                                        if (cbAgujeroOI.getSelectedItem().equals("Elija opción:")) {
                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico OI seleccionando un valor de la lista");
                                                            cbAgujeroOI.requestFocus();
                                                        } else {
                                                            if (cbAgujeroAO.getSelectedItem().equals("Elija opción:")) {
                                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo Agujero estenopeico AO seleccionando un valor de la lista");
                                                                cbAgujeroAO.requestFocus();
                                                            } else {
                                                                if (cbLejosOD.getSelectedItem().equals("Elija opción:")) {
                                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos OD seleccionando un valor de la lista");
                                                                    cbLejosOD.requestFocus();
                                                                } else {
                                                                    if (cbLejosOI.getSelectedItem().equals("Elija opción:")) {
                                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos OI seleccionando un valor de la lista");
                                                                        cbLejosOI.requestFocus();
                                                                    } else {
                                                                        if (cbLejosAO.getSelectedItem().equals("Elija opción:")) {
                                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV. Lejos AO seleccionando un valor de la lista");
                                                                            cbLejosAO.requestFocus();
                                                                        } else {

                                                                            if (cbAVRXAnteriorOD.getSelectedItem().equals("Elija opción:")) {
                                                                                JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente OD seleccionando un valor de la lista");
                                                                                cbAVRXAnteriorOD.requestFocus();
                                                                            } else {
                                                                                if (cbAVRXAnteriorOI.getSelectedItem().equals("Elija opción:")) {
                                                                                    JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente OI seleccionando un valor de la lista");
                                                                                    cbAVRXAnteriorOI.requestFocus();
                                                                                } else {
                                                                                    if (cbAVRXAnteriorAO.getSelectedItem().equals("Elija opción:")) {
                                                                                        JOptionPane.showMessageDialog(null, "¡Error! Debes completar el campo AV c/RX Final Paciente AO seleccionando un valor de la lista");
                                                                                        cbAVRXAnteriorAO.requestFocus();
                                                                                    } else {
                                                                                        String esfera, cilindro, eje, add, prisma, esferaoi, cilindrooi, ejeoi, addoi, prismaoi;
                                                                                        esfera = txtEsferaOD.getText();
                                                                                        esferaoi = txtEsferaOI.getText();
                                                                                        cilindro = txtCilindroOD.getText();
                                                                                        cilindrooi = txtCilindroOI.getText();
                                                                                        eje = txtEjeOD.getText();
                                                                                        ejeoi = txtEjeOI.getText();
                                                                                        add = txtADDOD.getText();
                                                                                        addoi = txtADDOI.getText();
                                                                                        prisma = txtPrismaOD.getText();
                                                                                        prismaoi = txtPrismaOI.getText();

                                                                                        if (esfera.equals("")
                                                                                                && esferaoi.equals("")
                                                                                                && cilindro.equals("") && cilindro.equals("")
                                                                                                && eje.equals("") && ejeoi.equals("")
                                                                                                && add.equals("") && addoi.equals("")
                                                                                                && prisma.equals("") && prismaoi.equals("")
                                                                                                && cbPocisionOD.getSelectedIndex() == (0) && cbPocisionOI.getSelectedIndex() == (0)) {
                                                                                            JOptionPane.showMessageDialog(null, "¡Error! Debes completar los campos necesarios para RX Final del paciente");
                                                                                            cbAVRXAnteriorAO.requestFocus();
                                                                                        } else {

                                                                                            try {
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                PreparedStatement pst = cn.prepareStatement("UPDATE examen_paciente SET EXAM_OBSE='" + txtArea.getText() + "',EXAM_ULTI_MODI='" + lblHoy1.getText() + " " + lblHoy.getText() + "' WHERE EXAM_ID='" + lblExamenVisual.getText() + "'");

                                                                                                int n = pst.executeUpdate();
                                                                                                cn.close();
                                                                                                if (n > 0) {
                                                                                                    //JOptionPane.showMessageDialog(null, "Registro modificado con éxito");

                                                                                                } else {
                                                                                                    JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro ya que primero debes guardar el examen");
                                                                                                }

                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 1");
                                                                                                System.out.println(e);
                                                                                                return;
                                                                                            }

                                                                                            try {
                                                                                                    int diab;
                                                                                                    if (chkDiabetes.isSelected()) {
                                                                                                        diab = 1;
                                                                                                    } else {
                                                                                                        diab = 0;
                                                                                                    }
                                                                                                    int migr;
                                                                                                    if (chkMigraña.isSelected()) {
                                                                                                        migr = 1;
                                                                                                    } else {
                                                                                                        migr = 0;
                                                                                                    }
                                                                                                    int hipe;
                                                                                                    if (chkHipertension.isSelected()) {
                                                                                                        hipe = 1;
                                                                                                    } else {
                                                                                                        hipe = 0;
                                                                                                    }
                                                                                                    int emba;
                                                                                                    if (chkEmbarazo.isSelected()) {
                                                                                                        emba = 1;
                                                                                                    } else {
                                                                                                        emba = 0;
                                                                                                    }
                                                                                                    int vlejana;
                                                                                                    if (rbVisionLejanaBuena.isSelected()) {
                                                                                                        vlejana = 1;
                                                                                                    } else {
                                                                                                        vlejana = 0;
                                                                                                    }
                                                                                                    int vcercana;
                                                                                                    if (rbVisionCercanaBuena.isSelected()) {
                                                                                                        vcercana = 1;
                                                                                                    } else {
                                                                                                        vcercana = 0;
                                                                                                    }
                                                                                                    int vborrosa;
                                                                                                    if (rbVisionBorrosaSi.isSelected()) {
                                                                                                        vborrosa = 1;
                                                                                                    } else {
                                                                                                        vborrosa = 0;
                                                                                                    }
                                                                                                    int foto;
                                                                                                    if (rbFotofobiaSi.isSelected()) {
                                                                                                        foto = 1;
                                                                                                    } else {
                                                                                                        foto = 0;
                                                                                                    }
                                                                                                String estadoSalud = "UPDATE estado_salud_paciente SET ESTA_SALU_DIAB='"+diab+"', ESTA_SALU_MIGR='"+migr+"', ESTA_SALU_HIPE='"+hipe+"', ESTA_SALU_EMBA='"+emba+"',"
                                                                                                        + "ESTA_SALU_VISI_LEJA='"+vlejana+"', ESTA_SALU_VISI_CERC='"+vcercana+"',  ESTA_SALU_VISI_BORR='"+vborrosa+"', ESTA_SALU_FOTO='"+foto+"' WHERE ESTA_SALU_EXAM_ID='"+lblExamenVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                    PreparedStatement pst = cn.prepareStatement(estadoSalud);
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp2.setBackground(Color.GREEN);
                                                                                                        //  evt.wait(3000);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 2 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                   // JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 2");
                                                                                                System.out.println(e);
                                                                                                //JOptionPane.showMessageDialog(null, "ahora va a borrar");
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                    String parpados = "";
                                                                                                    if (rbParpadeosBueno.isSelected()) {
                                                                                                        parpados = "B";
                                                                                                    } else if (rbParpadeosRegular.isSelected()) {
                                                                                                        parpados = "R";
                                                                                                    } else if (rbParpadeosMalo.isSelected()) {
                                                                                                        parpados = "M";
                                                                                                    }
                                                                                                    System.out.println(parpados + " este es el valor de parpados");
                                                                                                    String pantalleo = "";
                                                                                                    if (rbPantalleoBueno.isSelected()) {
                                                                                                        pantalleo = "B";
                                                                                                    } else if (rbPantalleoRegular.isSelected()) {
                                                                                                        pantalleo = "R";
                                                                                                    } else if (rbPantalleoMalo.isSelected()) {
                                                                                                        pantalleo = "M";
                                                                                                    }
                                                                                                    System.out.println(pantalleo + " este es el valor de pantalleo");
                                                                                                    String miosis = "";
                                                                                                    if (rbMiosisBueno.isSelected()) {
                                                                                                        miosis = "B";
                                                                                                    } else if (rbMiosisRegular.isSelected()) {
                                                                                                        miosis = "R";
                                                                                                    } else if (rbMiosisMalo.isSelected()) {
                                                                                                        miosis = "M";
                                                                                                    }
                                                                                                    System.out.println(miosis + " este es el valor de miosis");
                                                                                                    
                                                                                                    String anexos = "UPDATE anexos SET ANEX_PARP='"+parpados+"', ANEX_PANT='"+pantalleo+"', ANEX_MIOS='"+miosis+"' WHERE ANEX_EXAM_ID='"+lblExamenVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                 PreparedStatement pst = cn.prepareStatement(anexos);
                                                                                                 int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp3.setBackground(Color.GREEN);
                                                                                                        //evt.wait(3000);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 3 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                  //  JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 3");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
//                                                                                                String agudeza = "INSERT INTO agudeza_visual (AGUD_ID,AGUD_EXAM_ID) VALUES (?,?)";
//                                                                                                Conexionbd cc = new Conexionbd();
//                                                                                                Connection cn = cc.conexion();
//                                                                                                String[] datos = new String[12];
//                                                                                                if (datos[0] == null) {
//
//                                                                                                    PreparedStatement pst = cn.prepareStatement(agudeza);
//                                                                                                    try {
//                                                                                                        String sql = "SELECT MAX(AGUD_ID) AS id FROM agudeza_visual";
//                                                                                                        int valorId, idNuevo;
//
//                                                                                                        String[] datosId = new String[1];
//
//                                                                                                        java.sql.Statement st = cn.createStatement();
//                                                                                                        ResultSet rs = st.executeQuery(sql);
//                                                                                                        while (rs.next()) {
//                                                                                                            datosId[0] = rs.getString(1);
//                                                                                                        }
//
//                                                                                                        String recibir = datosId[0];
//
//                                                                                                        System.out.println(recibir + " valor obtenido bd");
//                                                                                                        if (recibir.equals(null)) {
//                                                                                                            idNuevo = 1;
//                                                                                                            lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
//                                                                                                        } else {
//                                                                                                            valorId = Integer.parseInt(recibir);
//                                                                                                            idNuevo = valorId + 1;
//                                                                                                            // Formatter fmt = new Formatter();
//                                                                                                            // fmt.format("%08d",idNuevo);
//                                                                                                            //System.out.println(fmt+"numero formateado");
//                                                                                                            lblIdAgudezaVisual.setText(Integer.toString(idNuevo));
//                                                                                                        }
//                                                                                                    } catch (Exception ex) {
//                                                                                                        System.out.println(ex);
//                                                                                                        String nl = System.getProperty("line.separator");
//                                                                                                        JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
//                                                                                                                + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
//                                                                                                        lblIdAgudezaVisual.setText(Integer.toString(1));
//                                                                                                    }
//                                                                                                    pst.setString(1, lblIdAgudezaVisual.getText());
//                                                                                                    pst.setString(2, lblExamenVisual.getText());
//
//                                                                                                    int n = pst.executeUpdate();
//                                                                                                    cn.close();
//                                                                                                    if (n > 0) {
//                                                                                                        //  jp4.setBackground(Color.GREEN);
//                                                                                                        //  JOptionPane.showMessageDialog(null, "Registro 4 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
//                                                                                                    }
//                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al guardar modulo 4");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String lejos = "UPDATE av_lejos SET LEJO_OD='"+cbLejosOD.getSelectedItem().toString()+"', LEJO_OI='"+cbLejosOI.getSelectedItem().toString()+"', LEJO_AO='"+cbLejosAO.getSelectedItem().toString()+"' WHERE LEJO_AGUD_ID='"+lblIdAgudezaVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                    PreparedStatement pst = cn.prepareStatement(lejos);
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp5.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 5 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                   // JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 5");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String agujero = "UPDATE agujero SET AGUJ_OD='"+cbAgujeroOD.getSelectedItem().toString()+"', AGUJ_OI='"+cbAgujeroOI.getSelectedItem().toString()+"', AGUJ_AO='"+cbAgujeroAO.getSelectedItem().toString()+"' WHERE AGUJ_AGUD_ID='"+lblIdAgudezaVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                    PreparedStatement pst = cn.prepareStatement(agujero);
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp6.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 6 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                   // JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 6");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String rx = "UPDATE rx_anterior SET RXAN_OD='"+cbRXAnteriorOD.getSelectedItem().toString()+"', RXAN_OI='"+cbRXAnteriorOI.getSelectedItem().toString()+"', RXAN_AO='"+cbRXAnteriorAO.getSelectedItem().toString()+"' WHERE RXAN_AGUD_ID='"+lblIdAgudezaVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                String[] datos = new String[12];
                                                                                                if (datos[0] == null) {
                                                                                                    PreparedStatement pst = cn.prepareStatement(rx);
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        // jp7.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 7 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                   // JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                }
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 7");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String crx = "UPDATE crx_final SET CRXF_OD='"+cbAVRXAnteriorOD.getSelectedItem().toString()+"', CRXF_OI='"+cbAVRXAnteriorOI.getSelectedItem().toString()+"', CRXF_AO='"+cbAVRXAnteriorAO.getSelectedItem().toString()+"' WHERE CRXF_AGUD_ID='"+lblIdAgudezaVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                PreparedStatement pst = cn.prepareStatement(crx);
                                                                                                int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp8.setBackground(Color.GREEN);
                                                                                                        // JOptionPane.showMessageDialog(null, "Registro 8 guardado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                    }else {
                                                                                                  //  JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 8");
                                                                                                System.out.println(e);
                                                                                                return;

                                                                                            }
                                                                                            try {
                                                                                                String rxFinal = "UPDATE rx_final SET RXFI_ESFE_OD='"+txtEsferaOD.getText()+"', RXFI_ESFE_OI='"+txtEsferaOI.getText()+"', RXFI_CILI_OD='"+txtCilindroOD.getText()+"', RXFI_CILI_OI='"+txtCilindroOI.getText()+"', RXFI_EJE_OD='"+txtEjeOD.getText()+"', RXFI_EJE_OI='"+txtEjeOI.getText()+"', RXFI_ADD_OD='"+txtADDOD.getText()+"', RXFI_ADD_OI='"+txtADDOI.getText()+"', RXFI_PRIS_OD='"+txtPrismaOD.getText()+"', RXFI_PRIS_OI='"+txtPrismaOI.getText()+"', RXFI_POSI_OD='"+cbPocisionOD.getSelectedItem().toString()+"', RXFI_POSI_OI='"+cbPocisionOI.getSelectedItem().toString()+"' WHERE RXFI_AGUD_ID='"+lblIdAgudezaVisual.getText()+"'";
                                                                                                Conexionbd cc = new Conexionbd();
                                                                                                Connection cn = cc.conexion();
                                                                                                    PreparedStatement pst = cn.prepareStatement(rxFinal);
                                                                                                    int n = pst.executeUpdate();
                                                                                                    cn.close();
                                                                                                    if (n > 0) {
                                                                                                        //  jp9.setBackground(Color.GREEN);
                                                                                                        //  jp10.setBackground(Color.GREEN);
                                                                                                        //  Alerta_Guardar.dispose();
                                                                                                        JOptionPane.showMessageDialog(null, "Registro actualizado con éxito", "Alerta", JOptionPane.INFORMATION_MESSAGE, new ImageIcon("src\\empleados\\imagenes\\EmpleadoAgregado.png"));
                                                                                                        
                                                                                                    }else {
                                                                                                  //  JOptionPane.showMessageDialog(null, "¡Error! no se pudo modificar el registro");
                                                                                                }
                                                                                                
                                                                                            } catch (Exception e) {
                                                                                                JOptionPane.showMessageDialog(null, "¡Error! al actualizar modulo 9 RX Final");
                                                                                                System.out.println(e);
                                                                                                
                                                                                                return;

                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnLimpiarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTodoActionPerformed
        LimpiarVentanaPrincipalPaciente();
        LimpiarPanelesAnexos();
        LimpiarExamen();
        PaginaExamenVisible(false);
    }//GEN-LAST:event_btnLimpiarTodoActionPerformed

    private void btnNextExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextExamenActionPerformed
       try{
        int numAnterior, numSiguiente, numTotal, numSeleccionado;
        numTotal=Integer.parseInt(lblNumero.getText());
        numSeleccionado=Integer.parseInt(lblUnode.getText());
        if (numSeleccionado<numTotal){
           numSeleccionado=numSeleccionado+1;
            lblUnode.setText(Integer.toString(numSeleccionado));           
        } 
        if(numSeleccionado>1){
             btnAnteriorExamen.setEnabled(true);
        } 
         if(numSeleccionado>numTotal-1){
             btnNextExamen.setEnabled(false);
             btnAnteriorExamen.requestFocus();
        } 
         String NumFila="SELECT EXAM_ID FROM(SELECT @rownum:=@rownum+1 AS NUMERO, EXAM_FECH, EXAM_ID, EXAM_PACI_ID FROM EXAMEN_PACIENTE E,(SELECT @rownum:=0) R WHERE EXAM_PACI_ID='"+lblIdPaciente.getText()+"' ORDER BY EXAM_FECH ASC LIMIT 15) K WHERE NUMERO='"+lblUnode.getText()+"'";
        try {
            int idExamen;
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(NumFila);
            while (rs.next()) {
                idExamen=Integer.parseInt(rs.getString(1));
                ColocarExamen(idExamen);
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo obtener el numero de fila para el examen!");
        }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "¡Error! al cambiar examen visual");
                }
    }//GEN-LAST:event_btnNextExamenActionPerformed

    private void btnAnteriorExamenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnteriorExamenActionPerformed
        try{
        int numAnterior, numSiguiente, numTotal, numSeleccionado;
        numTotal=Integer.parseInt(lblNumero.getText());
        numSeleccionado=Integer.parseInt(lblUnode.getText());
        if (numSeleccionado>1){
           numSeleccionado=numSeleccionado-1;
            lblUnode.setText(Integer.toString(numSeleccionado));           
        } 
        if(numSeleccionado<2)
             btnAnteriorExamen.setEnabled(false);
        
        if (numSeleccionado<numTotal)
             btnNextExamen.setEnabled(true);
        
        String NumFila="SELECT EXAM_ID FROM(SELECT @rownum:=@rownum+1 AS NUMERO, EXAM_FECH, EXAM_ID, EXAM_PACI_ID FROM EXAMEN_PACIENTE E,(SELECT @rownum:=0) R WHERE EXAM_PACI_ID='"+lblIdPaciente.getText()+"' ORDER BY EXAM_FECH ASC LIMIT 15) K WHERE NUMERO='"+lblUnode.getText()+"'";
        try {
            int idExamen;
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(NumFila);
            while (rs.next()) {
                idExamen=Integer.parseInt(rs.getString(1));
                ColocarExamen(idExamen);
            }
            cn.close();
        } catch (SQLException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo obtener el numero de fila para el examen!");
        }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "¡Error! al cambiar examen visual");
                }
                
    }//GEN-LAST:event_btnAnteriorExamenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Historia_clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Historia_clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Historia_clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Historia_clinica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Historia_clinica().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JDialog AgregarCliente;
    private javax.swing.JDialog Alerta_Guardar;
    private javax.swing.JDialog Barra;
    private javax.swing.JDialog BuscarExamen;
    private javax.swing.JDialog BuscarPaciente;
    private javax.swing.JDialog NuevaVenta;
    private javax.swing.JProgressBar Progreso;
    private javax.swing.ButtonGroup bgFotofobia;
    private javax.swing.ButtonGroup bgMiosis;
    private javax.swing.ButtonGroup bgPantalleo;
    private javax.swing.ButtonGroup bgParpadeos;
    private javax.swing.ButtonGroup bgVisionBorrosa;
    private javax.swing.ButtonGroup bgVisionCercana;
    private javax.swing.ButtonGroup bgVisionLejana;
    public static javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnAnteriorExamen;
    private javax.swing.JButton btnBuscarPacientes;
    private javax.swing.JButton btnColocarPaciente;
    private javax.swing.JButton btnExtender;
    private javax.swing.JButton btnGuardarExamenVisual;
    public static javax.swing.JButton btnGuardarPaciente;
    private javax.swing.JButton btnLimpiarTodo;
    private javax.swing.JButton btnModificar;
    private javax.swing.JButton btnNextExamen;
    private javax.swing.JButton btnTodosPacientes;
    private javax.swing.JButton btnVerExamen;
    private javax.swing.JComboBox<String> cbAVRXAnteriorAO;
    private javax.swing.JComboBox<String> cbAVRXAnteriorAO1;
    private javax.swing.JComboBox<String> cbAVRXAnteriorOD;
    private javax.swing.JComboBox<String> cbAVRXAnteriorOD1;
    private javax.swing.JComboBox<String> cbAVRXAnteriorOI;
    private javax.swing.JComboBox<String> cbAVRXAnteriorOI1;
    private javax.swing.JComboBox<String> cbAgujeroAO;
    private javax.swing.JComboBox<String> cbAgujeroAO1;
    private javax.swing.JComboBox<String> cbAgujeroOD;
    private javax.swing.JComboBox<String> cbAgujeroOD1;
    private javax.swing.JComboBox<String> cbAgujeroOI;
    private javax.swing.JComboBox<String> cbAgujeroOI1;
    private javax.swing.JComboBox<String> cbLejosAO;
    private javax.swing.JComboBox<String> cbLejosAO1;
    private javax.swing.JComboBox<String> cbLejosOD;
    private javax.swing.JComboBox<String> cbLejosOD1;
    private javax.swing.JComboBox<String> cbLejosOI;
    private javax.swing.JComboBox<String> cbLejosOI1;
    private javax.swing.JComboBox<String> cbPocisionOD;
    private javax.swing.JComboBox<String> cbPocisionOD1;
    private javax.swing.JComboBox<String> cbPocisionOI;
    private javax.swing.JComboBox<String> cbPocisionOI1;
    private javax.swing.JComboBox<String> cbRXAnteriorAO;
    private javax.swing.JComboBox<String> cbRXAnteriorAO1;
    private javax.swing.JComboBox<String> cbRXAnteriorOD;
    private javax.swing.JComboBox<String> cbRXAnteriorOD1;
    private javax.swing.JComboBox<String> cbRXAnteriorOI;
    private javax.swing.JComboBox<String> cbRXAnteriorOI1;
    private javax.swing.JComboBox cbxBuscarPaciente;
    private javax.swing.JComboBox cbxCategoriaPaciente;
    public javax.swing.JComboBox<String> cbxGenero;
    private javax.swing.JCheckBox chkDiabetes;
    private javax.swing.JCheckBox chkEmbarazo;
    public javax.swing.JCheckBox chkEsta;
    private javax.swing.JCheckBox chkHipertension;
    private javax.swing.JCheckBox chkMigraña;
    private org.edisoncor.gui.varios.ClockFace clockFace1;
    private javax.swing.JLabel estados;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel100;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel105;
    private javax.swing.JLabel jLabel106;
    private javax.swing.JLabel jLabel107;
    private javax.swing.JLabel jLabel108;
    private javax.swing.JLabel jLabel109;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    public javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabel92;
    private javax.swing.JLabel jLabel93;
    private javax.swing.JLabel jLabel94;
    private javax.swing.JLabel jLabel95;
    private javax.swing.JLabel jLabel96;
    private javax.swing.JLabel jLabel97;
    private javax.swing.JLabel jLabel98;
    private javax.swing.JLabel jLabel99;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    public static javax.swing.JLabel jlabelCategoria1;
    private javax.swing.JPanel jp1;
    private javax.swing.JPanel jp10;
    private javax.swing.JPanel jp2;
    private javax.swing.JPanel jp3;
    private javax.swing.JPanel jp4;
    private javax.swing.JPanel jp5;
    private javax.swing.JPanel jp6;
    private javax.swing.JPanel jp7;
    private javax.swing.JPanel jp8;
    private javax.swing.JPanel jp9;
    private javax.swing.JLabel lblBacKground;
    public static javax.swing.JLabel lblCategoriaCliente;
    private javax.swing.JLabel lblCelularColocar;
    private javax.swing.JLabel lblCelularNombre;
    private javax.swing.JLabel lblDe;
    private javax.swing.JLabel lblDireccionColocar;
    private javax.swing.JLabel lblDireccionNombre;
    public javax.swing.JLabel lblEstatusCliente;
    private javax.swing.JLabel lblExamenVisual;
    public static final javax.swing.JLabel lblFechaCliente = new javax.swing.JLabel();
    private javax.swing.JLabel lblFechaDeRegistro;
    private javax.swing.JLabel lblFechaExamen;
    private javax.swing.JLabel lblHoy;
    private javax.swing.JLabel lblHoy1;
    public javax.swing.JLabel lblId;
    private javax.swing.JLabel lblIdAgudezaVisual;
    private javax.swing.JLabel lblIdColocar;
    public javax.swing.JLabel lblIdNomb;
    public javax.swing.JLabel lblIdPaciente;
    private javax.swing.JLabel lblNombreCompleto;
    private javax.swing.JLabel lblNumero;
    public javax.swing.JLabel lblTituloCliente;
    private javax.swing.JLabel lblUltimaModificacion;
    private javax.swing.JLabel lblUnode;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JPanel pnlFechaExamen;
    public javax.swing.JPanel pnlImag;
    private javax.swing.JPanel pnlUltimaModificacion;
    private javax.swing.JRadioButton rbFotofobiaNo;
    private javax.swing.JRadioButton rbFotofobiaSi;
    private javax.swing.JRadioButton rbMiosisBueno;
    private javax.swing.JRadioButton rbMiosisMalo;
    private javax.swing.JRadioButton rbMiosisRegular;
    private javax.swing.JRadioButton rbPantalleoBueno;
    private javax.swing.JRadioButton rbPantalleoMalo;
    private javax.swing.JRadioButton rbPantalleoRegular;
    private javax.swing.JRadioButton rbParpadeosBueno;
    private javax.swing.JRadioButton rbParpadeosMalo;
    private javax.swing.JRadioButton rbParpadeosRegular;
    private javax.swing.JRadioButton rbVisionBorrosaNo;
    private javax.swing.JRadioButton rbVisionBorrosaSi;
    private javax.swing.JRadioButton rbVisionCercanaBuena;
    private javax.swing.JRadioButton rbVisionCercanaMala;
    private javax.swing.JRadioButton rbVisionLejanaBuena;
    private javax.swing.JRadioButton rbVisionLejanaMala;
    private javax.swing.JTable tblExamenVisual;
    private javax.swing.JTextField txtADDOD;
    private javax.swing.JTextField txtADDOD1;
    private javax.swing.JTextField txtADDOI;
    private javax.swing.JTextField txtADDOI1;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtCilindroOD;
    private javax.swing.JTextField txtCilindroOD1;
    private javax.swing.JTextField txtCilindroOI;
    private javax.swing.JTextField txtCilindroOI1;
    public javax.swing.JTextField txtDire;
    public javax.swing.JTextField txtDireccionExamen;
    public javax.swing.JTextField txtEdad;
    public javax.swing.JTextField txtEdadExamen;
    private javax.swing.JTextField txtEjeOD;
    private javax.swing.JTextField txtEjeOD1;
    private javax.swing.JTextField txtEjeOI;
    private javax.swing.JTextField txtEjeOI1;
    private javax.swing.JTextField txtEsferaOD;
    private javax.swing.JTextField txtEsferaOD1;
    private javax.swing.JTextField txtEsferaOI;
    private javax.swing.JTextField txtEsferaOI1;
    public javax.swing.JTextField txtFechaExamen;
    public javax.swing.JTextField txtMail;
    public javax.swing.JTextField txtMailExamen;
    public javax.swing.JTextField txtMaterno;
    public javax.swing.JTextField txtNombre;
    public javax.swing.JTextField txtNombreExamen;
    public javax.swing.JTextField txtOcupacion;
    public javax.swing.JTextField txtOcupacionExamen;
    public javax.swing.JTextField txtPaterno;
    private javax.swing.JTextField txtPrismaOD;
    private javax.swing.JTextField txtPrismaOD1;
    private javax.swing.JTextField txtPrismaOI;
    private javax.swing.JTextField txtPrismaOI1;
    public javax.swing.JTextField txtSexoExamen;
    public javax.swing.JTextField txtTelCasaExamen;
    public javax.swing.JTextField txtTelCelExamen;
    public javax.swing.JTextField txtTele;
    public javax.swing.JTextField txtTeleCasa;
    // End of variables declaration//GEN-END:variables
public void ColocarPaciente() {
        String fecha;
        String sql = "";
//        sql = "SELECT PACI_ID, concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE), PACI_DIRE, PACI_TELE_CASA, PACI_TELE_CELU, PACI_MAIL,"
//                + " PACI_FECH_REGI, SEXO_NOMB, PACI_EDAD, ESTA_PACI_NOMB, PACI_OCUP FROM PACIENTE INNER JOIN SEXO INNER JOIN ESTATUS_PACIENTE INNER JOIN CATEGORIA_PACIENTE"
//                + " ON PACI_SEXO_ID=SEXO_ID AND PACI_ESTA_ID=ESTA_PACI_ID AND PACI_CATE_ID=CATE_ID WHERE CATE_NOMB='PACIENTE' ORDER BY PACI_ID DESC LIMIT 1";
        
         sql = "SELECT PACI_ID, concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE), PACI_DIRE, PACI_TELE_CASA, PACI_TELE_CELU, PACI_MAIL,"
                + " PACI_FECH_REGI, SEXO_NOMB, PACI_EDAD, ESTA_PACI_NOMB, PACI_OCUP FROM PACIENTE INNER JOIN SEXO INNER JOIN ESTATUS_PACIENTE INNER JOIN CATEGORIA_PACIENTE"
                + " ON PACI_SEXO_ID=SEXO_ID AND PACI_ESTA_ID=ESTA_PACI_ID AND PACI_CATE_ID=CATE_ID ORDER BY PACI_ID DESC LIMIT 1";
         
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                lblIdPaciente.setText(rs.getString(1));
                txtNombreExamen.setText(rs.getString(2));
                txtDireccionExamen.setText(rs.getString(3));
                txtTelCasaExamen.setText(rs.getString(4));
                txtTelCelExamen.setText(rs.getString(5));
                txtMailExamen.setText(rs.getString(6));
                fecha = rs.getString(7);
                System.out.println("Entrada->" + fecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(fecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                txtFechaExamen.setText(salida);
                String sexo = rs.getString(8);
                if (sexo.equals("MASCULINO")) {
                    txtSexoExamen.setText("M");
                } else {
                    txtSexoExamen.setText("F");
                }
                txtEdadExamen.setText(rs.getString(9));
                txtOcupacionExamen.setText(rs.getString(11));
            }
            cn.close();

        } catch (SQLException ex) {
            Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo colocar la información!");
        }
    }

    public void ColocarPaciente(int id) {
        String fecha;
        String sql = "SELECT P.PACI_ID, concat_ws(' ',P.PACI_NOMB, P.PACI_PATE, P.PACI_MATE), P.PACI_DIRE, P.PACI_FECH_REGI, P.PACI_TELE_CASA, P.PACI_TELE_CELU, S.SEXO_NOMB, P.PACI_EDAD, PACI_MAIL, P.PACI_OCUP FROM PACIENTE AS P INNER JOIN SEXO AS S ON PACI_SEXO_ID=SEXO_ID WHERE concat_ws(' ', PACI_NOMB, PACI_PATE, PACI_MATE)='" + id + "'";
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                lblIdPaciente.setText(rs.getString(1));
                txtNombreExamen.setText(rs.getString(2));
                txtDireccionExamen.setText(rs.getString(3));
                txtTelCasaExamen.setText(rs.getString(5));
                txtTelCelExamen.setText(rs.getString(6));
                txtMailExamen.setText(rs.getString(9));
                fecha = rs.getString(4);
                System.out.println("Entrada->" + fecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(fecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                txtFechaExamen.setText(salida);
                String sexo = rs.getString(7);
                if (sexo.equals("MASCULINO")) {
                    txtSexoExamen.setText("M");
                } else {
                    txtSexoExamen.setText("F");
                }
                txtEdadExamen.setText(rs.getString(8));
                txtOcupacionExamen.setText(rs.getString(10));
            }
            cn.close();

        } catch (SQLException ex) {
            Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo colocar la información!");
        }
    }

    public void EditarPaciente() {
        Clientes cl = new Clientes();
        String fecha;
        String sql = "";
        sql = "SELECT PACI_ID, PACI_NOMB, PACI_PATE, PACI_MATE, PACI_DIRE, PACI_TELE_CASA, PACI_TELE_CELU, PACI_MAIL,"
                + " PACI_FECH_REGI, SEXO_NOMB, PACI_EDAD, ESTA_PACI_NOMB, PACI_OCUP FROM PACIENTE INNER JOIN SEXO INNER JOIN ESTATUS_PACIENTE INNER JOIN CATEGORIA_PACIENTE"
                + " ON PACI_SEXO_ID=SEXO_ID AND PACI_ESTA_ID=ESTA_PACI_ID AND PACI_CATE_ID=CATE_ID WHERE CATE_NOMB='PACIENTE' ORDER BY PACI_ID DESC LIMIT 1";
        String[] datos = new String[15];
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                cl.lblId.setText(rs.getString(1));
                cl.txtFirstName.setText(rs.getString(2));
                cl.txtPaternoCliente.setText(rs.getString(3));
                cl.txtMaternoCliente.setText(rs.getString(4));
                cl.txtDire.setText(rs.getString(5));
                cl.txtTeleCasa.setText(rs.getString(6));
                cl.txtTele.setText(rs.getString(7));
                cl.txtMail.setText(rs.getString(8));
                fecha = rs.getString(9);
                System.out.println("Entrada->" + fecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(fecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                cl.lblFechaCliente.setText(salida);
                String sexo = rs.getString(10);
                try {
                    Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
                    cl.cbxGenero.removeAllItems();
                    cl.cbxGenero.addItem("SELECCIONA:");
                    for (int i = 0; i < combo_llenar_sexo.length; i++) {
                        cl.cbxGenero.addItem((String) combo_llenar_sexo[i]);
                    }
                } catch (Exception e) {
                    Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
                    cl.cbxGenero.removeAllItems();
                    cl.cbxGenero.addItem("SELECCIONA:");
                    for (int i = 0; i < combo_llenar_sexo.length; i++) {
                        cl.cbxGenero.addItem((String) combo_llenar_sexo[i]);
                    }
                }

                cl.cbxGenero.setSelectedItem(sexo);
                cl.txtEdad.setText(rs.getString(11));
                cl.txtOcupacion.setText(rs.getString(13));
            }
            cn.close();

        } catch (SQLException ex) {
            Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo colocar la información!");
        }
    }

    void ValidaCorreo(String correo) {

        int longitud = correo.length();
        char valor;

        for (char i = 0; i < longitud; i++) {
            valor = correo.charAt(i);
            if (valor == '@' && i == 0) {
                System.out.println("El correo esta mal");

                break;
            }
            if (valor == '@') {
                System.out.println("Escribistes perfectamente el correo");
                break;
            } else if (i == longitud - 1) {
                System.out.println("El correo esta mal");
                JOptionPane.showMessageDialog(null, "Correo Inválido");
                break;

            }

        }

    }

    public void LetraCapital(java.awt.event.KeyEvent evt, JTextField a) {
        a = (JTextField) evt.getComponent();

        String texto = a.getText();//.trim();//para evitar espacios en blanco antes y despues del texto
        if (texto.length() > 0) {
            char primero = texto.charAt(0);
            texto = Character.toUpperCase(primero) + texto.substring(1, texto.length());
            a.setText(texto);
        }
    }

    public void sololetras(JTextField a) {
        a.addKeyListener(new KeyAdapter() {

            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();

                }

            }

        });
    }

    public void soloNumeros(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    getToolkit().beep();
                    e.consume();

                }

            }

        });
    }

    public void mayusculas(JTextField e) {
        e.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char caracter = e.getKeyChar();
                if (Character.isLowerCase(caracter)) {
                    e.setKeyChar(Character.toUpperCase(caracter));
                }
            }
        });

    }

    void Limpiar() {
        txtPaterno.setText("");
        txtMaterno.setText("");
        txtDire.setText("");
        txtOcupacion.setText("");
        txtTele.setText("");
        txtMail.setText("");
        txtNombre.setText("");
        txtTeleCasa.setText("");
        txtEdad.setText("");
        cbxGenero.setSelectedItem("SELECCIONA:");
        lblId.setText("");
        lblId.setVisible(false);
        lblIdNomb.setVisible(false);
        lblCategoriaCliente.setVisible(true);
        chkEsta.setSelected(false);
        chkEsta.setText("CLIENTE INACTIVO");
        pnlImag.setBackground(new java.awt.Color(204, 0, 0));
        String formato = "dd/MM/yyyy";
        Date date = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat(formato);
        String fechafin = sdf.format(date);
        lblFechaCliente.setText(fechafin);
    }

    public void Validar() {
        RestrictedTextField restricted = new RestrictedTextField(txtNombre);
        restricted.setLimit(30);
        RestrictedTextField restricted1 = new RestrictedTextField(txtPaterno);
        restricted1.setLimit(30);
        RestrictedTextField restricted2 = new RestrictedTextField(txtMaterno);
        restricted2.setLimit(30);
        RestrictedTextField restricted3 = new RestrictedTextField(txtDire);
        restricted3.setLimit(60);
        RestrictedTextField restrictedTeleCasa = new RestrictedTextField(txtTeleCasa);
        restrictedTeleCasa.setLimit(15);
        RestrictedTextField restricted4 = new RestrictedTextField(txtTele);
        restricted4.setLimit(15);
        RestrictedTextField restricted5 = new RestrictedTextField(txtMail);
        restricted5.setLimit(50);
        RestrictedTextField restricted6 = new RestrictedTextField(txtEdad);
        restricted6.setLimit(3);
        sololetras(txtNombre);
        sololetras(txtMaterno);
        sololetras(txtPaterno);
        solo_numeros.solonumeros(txtEdad);
        soloNumeros(txtTele);
        soloNumeros(txtTeleCasa);

    }

    public void cerrar() {
        Object[] opciones = {"Aceptar", "Cancelar"};
        int eleccion = JOptionPane.showOptionDialog(rootPane, "Esta seguro de cerrar la aplicacion", "Mensaje de Confirmacion",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, opciones, "Aceptar");
//int eleccion=JOptionPane.showConfirmDialog(null, "¿Esta seguro de cerrar la aplicacion?", "Mensaje de Confirmación", JOptionPane.YES_NO_OPTION);

        if (eleccion == JOptionPane.YES_OPTION) //{
        //if (eleccion == 1)
        {
            System.exit(0);
        } else {
            btnAgregar.requestFocus();
        }
    }

    public void iniciar() {

        setLocationRelativeTo(null);
        Progreso.setVisible(true);
        Progreso.setBackground(Color.BLUE);
        hilo = new Cargar_splash(getProgreso());
        hilo.start();
        hilo = null;

    }

    public void ProgresoStateChanged(javax.swing.event.ChangeEvent evt) {
        if (Progreso.getValue() == 10) {
            estados.setText("Comprobando conexión a base de datos ");
        }
        if (Progreso.getValue() == 20) {
            estados.setText("Cargando iconos");
        }
        if (Progreso.getValue() == 30) {
            estados.setText("Preparando interfaz de usuario");
        }
        if (Progreso.getValue() == 40) {
            estados.setText("Creando el entorno de la aplicación");
        }
        if (Progreso.getValue() == 50) {
            estados.setText("Terminando...");
        }
        if (Progreso.getValue() == 60) {
            estados.setText("Listo");
        }
        if (Progreso.getValue() == 100) {

            this.dispose();

        }
    }

    public javax.swing.JProgressBar getProgreso() {
        return Progreso;
    }

    /**
     * @param Progreso the Progreso to set
     */
    public void setProgreso(javax.swing.JProgressBar Progreso) {
        this.Progreso = Progreso;
    }

    void LimpiarVentanaPrincipalPaciente() {
        lblExamenVisual.setText("");
        txtFechaExamen.setText("");
        lblIdPaciente.setText("");
        txtNombreExamen.setText("");
        txtEdadExamen.setText("");
        txtDireccionExamen.setText("");
        txtSexoExamen.setText("");
        txtOcupacionExamen.setText("");
        txtTelCasaExamen.setText("");
        txtTelCelExamen.setText("");
        txtMailExamen.setText("");
                       
    }

    void LimpiarPanelesAnexos() {
        chkDiabetes.setSelected(false);
        chkMigraña.setSelected(false);
        chkHipertension.setSelected(false);
        chkEmbarazo.setSelected(false);
//rbVisionLejanaBuena.setSelected(false);
//rbVisionLejanaMala.setSelected(false);
//rbVisionBorrosaSi.setSelected(false);
//rbVisionBorrosaNo.setSelected(false);
//rbVisionCercanaBuena.setSelected(false);
//rbVisionCercanaMala.setSelected(false);
//rbFotofobiaSi.setSelected(false);
//rbFotofobiaNo.setSelected(false);
//rbParpadeosBueno.setSelected(false);
//rbParpadeosRegular.setSelected(false);
//rbParpadeosMalo.setSelected(false);
//rbPantalleoBueno.setSelected(false);
//rbPantalleoRegular.setSelected(false);
//rbPantalleoMalo.setSelected(false);
//rbMiosisBueno.setSelected(false);
//rbMiosisRegular.setSelected(false);
//rbMiosisMalo.setSelected(false);
        bgVisionLejana.clearSelection();
        bgVisionCercana.clearSelection();
        bgVisionBorrosa.clearSelection();
        bgParpadeos.clearSelection();
        bgPantalleo.clearSelection();
        bgMiosis.clearSelection();
        bgFotofobia.clearSelection();
        cbLejosOD.setSelectedIndex(0);
        cbLejosOI.setSelectedIndex(0);
        cbLejosAO.setSelectedIndex(0);
        cbAgujeroOD.setSelectedIndex(0);
        cbAgujeroOI.setSelectedIndex(0);
        cbAgujeroAO.setSelectedIndex(0);
        cbRXAnteriorOD.setSelectedIndex(0);
        cbRXAnteriorOI.setSelectedIndex(0);
        cbRXAnteriorAO.setSelectedIndex(0);
        cbAVRXAnteriorOD.setSelectedIndex(0);
        cbAVRXAnteriorOI.setSelectedIndex(0);
        cbAVRXAnteriorAO.setSelectedIndex(0);
        txtEsferaOD.setText("");
        txtEsferaOI.setText("");
        txtCilindroOD.setText("");
        txtCilindroOI.setText("");
        txtEjeOD.setText("");
        txtEjeOI.setText("");
        txtADDOD.setText("");
        txtADDOI.setText("");
        txtPrismaOD.setText("");
        txtPrismaOI.setText("");
        cbPocisionOD.setSelectedIndex(0);
        cbPocisionOI.setSelectedIndex(0);
        txtArea.setText("");
        btnAgregar.requestFocus();

    }

    void LimpiarExamen() {
//        txtFechaExamen.setText("");
//        lblIdPaciente.setText("");
//        txtNombreExamen.setText("");
//        txtEdadExamen.setText("");
//        txtDireccionExamen.setText("");
//        txtSexoExamen.setText("");
//        txtOcupacionExamen.setText("");
//        txtTelCasaExamen.setText("");
//        txtTelCelExamen.setText("");
//        txtMailExamen.setText("");
        lblFechaExamen.setText("");
        lblUltimaModificacion.setText("");
        chkDiabetes.setSelected(false);
        chkMigraña.setSelected(false);
        chkHipertension.setSelected(false);
        chkEmbarazo.setSelected(false);
//rbVisionLejanaBuena.setSelected(false);
//rbVisionLejanaMala.setSelected(false);
//rbVisionBorrosaSi.setSelected(false);
//rbVisionBorrosaNo.setSelected(false);
//rbVisionCercanaBuena.setSelected(false);
//rbVisionCercanaMala.setSelected(false);
//rbFotofobiaSi.setSelected(false);
//rbFotofobiaNo.setSelected(false);
//rbParpadeosBueno.setSelected(false);
//rbParpadeosRegular.setSelected(false);
//rbParpadeosMalo.setSelected(false);
//rbPantalleoBueno.setSelected(false);
//rbPantalleoRegular.setSelected(false);
//rbPantalleoMalo.setSelected(false);
//rbMiosisBueno.setSelected(false);
//rbMiosisRegular.setSelected(false);
//rbMiosisMalo.setSelected(false);
        bgVisionLejana.clearSelection();
        bgVisionCercana.clearSelection();
        bgVisionBorrosa.clearSelection();
        bgParpadeos.clearSelection();
        bgPantalleo.clearSelection();
        bgMiosis.clearSelection();
        bgFotofobia.clearSelection();
        cbLejosOD.setSelectedIndex(0);
        cbLejosOI.setSelectedIndex(0);
        cbLejosAO.setSelectedIndex(0);
        cbAgujeroOD.setSelectedIndex(0);
        cbAgujeroOI.setSelectedIndex(0);
        cbAgujeroAO.setSelectedIndex(0);
        cbRXAnteriorOD.setSelectedIndex(0);
        cbRXAnteriorOI.setSelectedIndex(0);
        cbRXAnteriorAO.setSelectedIndex(0);
        cbAVRXAnteriorOD.setSelectedIndex(0);
        cbAVRXAnteriorOI.setSelectedIndex(0);
        cbAVRXAnteriorAO.setSelectedIndex(0);
        txtEsferaOD.setText("");
        txtEsferaOI.setText("");
        txtCilindroOD.setText("");
        txtCilindroOI.setText("");
        txtEjeOD.setText("");
        txtEjeOI.setText("");
        txtADDOD.setText("");
        txtADDOI.setText("");
        txtPrismaOD.setText("");
        txtPrismaOI.setText("");
        cbPocisionOD.setSelectedIndex(0);
        cbPocisionOI.setSelectedIndex(0);
        txtArea.setText("");
        btnAgregar.requestFocus();

    }

    public void colocaPacienteModificado() {

        String query = "SELECT P.PACI_ID, concat_ws(' ',P.PACI_NOMB, P.PACI_PATE, P.PACI_MATE), P.PACI_DIRE, P.PACI_FECH_REGI, P.PACI_TELE_CASA, P.PACI_TELE_CELU, S.SEXO_NOMB, P.PACI_EDAD, PACI_MAIL, P.PACI_OCUP FROM PACIENTE AS P INNER JOIN SEXO AS S ON PACI_SEXO_ID=SEXO_ID WHERE PACI_ID='" + lblId.getText() + "'";
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                String idPaciente = rs.getString(1);
                lblIdPaciente.setText(idPaciente);
                String nombre = rs.getString(2);
                txtNombreExamen.setText(nombre);
                String direccion = rs.getString(3);
                txtDireccionExamen.setText(direccion);
                String tomarfecha = rs.getString(4);
                System.out.println("Entrada->" + tomarfecha);

                DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date date = null;

                try {
                    date = inputFormatter.parse(tomarfecha);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                String salida = outputFormatter.format(date);
                System.out.println("Salida->" + salida);
                txtFechaExamen.setText(salida);
                String telCasa = rs.getString(5);
                txtTelCasaExamen.setText(telCasa);
                String celular = rs.getString(6);
                txtTelCelExamen.setText(celular);
                System.out.println("pazo aki");
                String sexo = rs.getString(7);
                if (sexo.equals("MASCULINO")) {
                    sexo = "M";
                } else {
                    sexo = "F";
                }
                txtSexoExamen.setText(sexo);
                String edad = rs.getString(8);
                txtEdadExamen.setText(edad);
                String mail = rs.getString(9);
                txtMailExamen.setText(mail);
                String ocupacion = rs.getString(10);
                txtOcupacionExamen.setText(ocupacion);

            }

            cn.close();
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    public void LimpiarPaciente() {   //NO SE UTILIZA
        lblIdPaciente.setText("");

        txtNombreExamen.setText("");

        txtDireccionExamen.setText("");
        txtFechaExamen.setText("");
        txtTelCasaExamen.setText("");

        txtTelCelExamen.setText("");
        txtSexoExamen.setText("");
        txtEdadExamen.setText("");

        txtMailExamen.setText("");

        txtOcupacionExamen.setText("");
    }

    public void CargarUltimoIdExamenPaciente() {
        String sql = "SELECT MAX(EXAM_ID) AS id FROM examen_paciente";
        int valorId, idNuevo;

        try {
            Conexionbd c2 = new Conexionbd();
            java.sql.Connection cn2 = c2.conexion();
            String[] datosId = new String[1];

            java.sql.Statement st = cn2.createStatement();
            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                datosId[0] = rs.getString(1);
            }

            String recibir = datosId[0];
            cn2.close();
            System.out.println(recibir + " valor obtenido bd");
            if (recibir.equals(null)) {
                idNuevo = 1;
                lblExamenVisual.setText(Integer.toString(idNuevo));
            } else {
                valorId = Integer.parseInt(recibir);
                idNuevo = valorId + 1;
                // Formatter fmt = new Formatter();
                // fmt.format("%08d",idNuevo);
                //System.out.println(fmt+"numero formateado");
                lblExamenVisual.setText(Integer.toString(idNuevo));
            }
        } catch (Exception ex) {
            System.out.println(ex);
            String nl = System.getProperty("line.separator");
            JOptionPane.showMessageDialog(null, " ¡No ha sido posible obtener el ultimo Id de Examen Visual"
                    + nl + "Si es su primer Examen Visual ignore este mensaje" + nl + "sino consulte su manual de usuario o directamente con su administrador");
            lblExamenVisual.setText(Integer.toString(1));
        }
    }

    public void ColocarExamen() {
        int fila = tblExamenVisual.getSelectedRow();
        int columna = tblExamenVisual.getSelectedRow();
        int idExamenVisual;
        if (fila >= 0) {
            if (tblExamenVisual.getValueAt(fila, columna) == null) {
                JOptionPane.showMessageDialog(null, "¡La fila que seleccionó esta vacía!");
            } else if (fila >= 0 && columna >= 0) {

                idExamenVisual = Integer.parseInt(tblExamenVisual.getValueAt(fila, 0).toString());
                System.out.println("Id Examen visual ----->" + idExamenVisual);
                   ColocarExamen(idExamenVisual);
            }
        } else {

            JOptionPane.showMessageDialog(null, "¡No selecionó ninguna fila!");
        }

    }
    public void PaginaExamen(int idPaciente,int idExamenVisual){
        String totalExamenes="select count(*) from examen_paciente where EXAM_PACI_ID='"+idPaciente+"'";
        String numeroDe="SELECT NUMERO FROM(SELECT @rownum:=@rownum+1 AS NUMERO, EXAM_FECH, EXAM_ID FROM EXAMEN_PACIENTE E,(SELECT @rownum:=0) R WHERE EXAM_PACI_ID='"+idPaciente+"' ORDER BY EXAM_FECH ASC LIMIT 15) K WHERE EXAM_ID='"+idExamenVisual+"'";
        try {
            Conexionbd cc = new Conexionbd();
            Connection cn = cc.conexion();
            Statement st = cn.createStatement();
            ResultSet rs = st.executeQuery(totalExamenes);
            while (rs.next()) {
                lblNumero.setText(rs.getString(1));             
            }
            Statement st2 = cn.createStatement();
            ResultSet rs2 = st2.executeQuery(numeroDe);
            while (rs2.next()) {
                lblUnode.setText(rs2.getString(1));             
            }
            cn.close();
            UnodeNumero(Integer.parseInt(lblNumero.getText()),Integer.parseInt(lblUnode.getText()));
            PaginaExamenVisible(true);
        } catch (SQLException ex) {
            System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error ¡No se pudo obtener el numero de examenes para el paciente seleccionado!");
        }
        
    }
    public void UnodeNumero(int numTotal,int numColumna){
    if (numColumna<2)
        btnAnteriorExamen.setEnabled(false);
    else
        btnAnteriorExamen.setEnabled(true);
    if (numColumna>numTotal-1)
        btnNextExamen.setEnabled(false);
     else
        btnNextExamen.setEnabled(true);
    }
    public void PaginaExamenVisible(boolean bool){
        if (bool==false){
        lblUnode.setVisible(false);
        lblDe.setVisible(false);
        lblNumero.setVisible(false);
        btnAnteriorExamen.setVisible(false);
        btnNextExamen.setVisible(false);
        pnlFechaExamen.setVisible(false);
        pnlUltimaModificacion.setVisible(false);
        btnGuardarExamenVisual.setVisible(true);
        }
        else{
        lblUnode.setVisible(true);
        lblDe.setVisible(true);
        lblNumero.setVisible(true);
        btnAnteriorExamen.setVisible(true);
        btnNextExamen.setVisible(true);
        pnlFechaExamen.setVisible(true);
        pnlUltimaModificacion.setVisible(true);
        btnGuardarExamenVisual.setVisible(false);
        }
    }
    public void ColocarExamen(int idExamen) {
                String query = "SELECT P.PACI_ID, concat_ws(' ',P.PACI_NOMB, P.PACI_PATE, P.PACI_MATE), P.PACI_DIRE, P.PACI_FECH_REGI, P.PACI_TELE_CASA, P.PACI_TELE_CELU,"
                        + " S.SEXO_NOMB, P.PACI_EDAD, PACI_MAIL, P.PACI_OCUP,  E.EXAM_ID, E.EXAM_FECH, E.EXAM_OBSE, E.EXAM_ULTI_MODI, ES. ESTA_SALU_DIAB,"
                        + " ES. ESTA_SALU_MIGR, ES. ESTA_SALU_HIPE, ES. ESTA_SALU_EMBA, ES. ESTA_SALU_VISI_LEJA, ES. ESTA_SALU_VISI_CERC, ES. ESTA_SALU_VISI_BORR,"
                        + " ES. ESTA_SALU_FOTO, A.ANEX_PARP, A.ANEX_PANT, A.ANEX_MIOS, AGU.AGUD_ID, LE.LEJO_OD, LE.LEJO_OI, LE.LEJO_AO, AG.AGUJ_OD, AG.AGUJ_OI,"
                        + " AG.AGUJ_AO, RA.RXAN_OD, RA.RXAN_OI, RA.RXAN_AO, AV.CRXF_OD, AV.CRXF_OI,AV.CRXF_AO, RF.RXFI_ESFE_OD, RF.RXFI_ESFE_OI, RF.RXFI_CILI_OD,"
                        + " RF.RXFI_CILI_OI, RF.RXFI_EJE_OD, RF.RXFI_EJE_OI, RF.RXFI_ADD_OD, RF.RXFI_ADD_OI, RF.RXFI_PRIS_OD, RF.RXFI_PRIS_OI, RF.RXFI_POSI_OD, "
                        + "RF.RXFI_POSI_OI FROM PACIENTE AS P INNER JOIN SEXO AS S INNER JOIN EXAMEN_PACIENTE AS E INNER JOIN ESTADO_SALUD_PACIENTE AS ES INNER JOIN ANEXOS AS A "
                        + "INNER JOIN AGUDEZA_VISUAL AS AGU INNER JOIN AV_LEJOS AS LE INNER JOIN AGUJERO AS AG INNER JOIN RX_ANTERIOR AS RA INNER JOIN CRX_FINAL AS AV "
                        + "INNER JOIN RX_FINAL AS RF ON PACI_ID=EXAM_PACI_ID AND PACI_SEXO_ID=SEXO_ID AND EXAM_ID=ESTA_SALU_EXAM_ID AND EXAM_ID=ANEX_EXAM_ID AND "
                        + "EXAM_ID=AGUD_EXAM_ID AND AGUD_ID=LEJO_AGUD_ID AND AGUD_ID=RXAN_AGUD_ID AND AGUD_ID=AGUJ_AGUD_ID AND AGUD_ID=CRXF_AGUD_ID AND AGUD_ID=RXFI_AGUD_ID WHERE EXAM_ID='" + idExamen+ "'";
                String[] datos = new String[50];

                try {
                    Conexionbd cc = new Conexionbd();
                    Connection cn = cc.conexion();
                    Statement st = cn.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        lblIdPaciente.setText(rs.getString(1));
                        txtNombreExamen.setText(rs.getString(2));
                        txtDireccionExamen.setText(rs.getString(3));
                        String fecha = rs.getString(4);
                        System.out.println("Entrada->" + fecha);

                        DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
                        java.util.Date date = null;

                        try {
                            date = inputFormatter.parse(fecha);
                        } catch (ParseException pe) {
                            pe.printStackTrace();
                        }

                        DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
                        String salida = outputFormatter.format(date);
                        System.out.println("Salida->" + salida);
                        txtFechaExamen.setText(salida);
                        txtTelCasaExamen.setText(rs.getString(5));
                        txtTelCelExamen.setText(rs.getString(6));
                        String sexo = rs.getString(7);
                        if (sexo.equals("MASCULINO")) {
                            sexo = "M";
                        } else {
                            sexo = "F";
                        }
                        txtSexoExamen.setText(sexo);
                        txtEdadExamen.setText(rs.getString(8));
                        txtMailExamen.setText(rs.getString(9));
                        txtOcupacionExamen.setText(rs.getString(10));
                        lblExamenVisual.setText(rs.getString(11));
//                        pnlFechaExamen.setVisible(true);
                        String tomarfecha = rs.getString(12);
                Calendar calendario = Calendar.getInstance();
//Calendar calendario2 = new GregorianCalendar();
                int hora, minutos, segundos;
                hora = calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                System.out.println("Entrada->" + tomarfecha + " " + hora + ":" + minutos);

                DateFormat inputFormatter2 = new SimpleDateFormat("yyyy-MM-dd HH:mm");
                java.util.Date date2 = null;

                try {
                    date2 = inputFormatter2.parse(tomarfecha + " " + hora + ":" + minutos);
                } catch (ParseException pe) {
                    pe.printStackTrace();
                }

                DateFormat outputFormatter2 = new SimpleDateFormat("dd/MM/yyyy HH:mm");
                String salida2 = outputFormatter2.format(date2);
                System.out.println("Salida->" + salida2);
                lblFechaExamen.setText("Fecha de Examen: "+salida2);
                        txtArea.setText(rs.getString(13));
//                        pnlUltimaModificacion.setVisible(true);
                        lblUltimaModificacion.setText("Última modificación: "+rs.getString(14));
                        int diabetes = Integer.parseInt(rs.getString(15));
                        System.out.println("valor de diabetes------>" + diabetes);
                        if (diabetes == 1) {
                            chkDiabetes.setSelected(true);
                        }else
                            chkDiabetes.setSelected(false);
                        int migraña = Integer.parseInt(rs.getString(16));
                        System.out.println("valor de diabetes------>" + migraña);
                        if (migraña == 1) {
                            chkMigraña.setSelected(true);
                        }else
                            chkMigraña.setSelected(false);
                        int hipertension = Integer.parseInt(rs.getString(17));
                        System.out.println("valor de diabetes------>" + hipertension);
                        if (hipertension == 1) {
                            chkHipertension.setSelected(true);
                        }else
                            chkHipertension.setSelected(false);
                        int embarazo = Integer.parseInt(rs.getString(18));
                        System.out.println("valor de diabetes------>" + embarazo);
                        if (embarazo == 1) {
                            chkEmbarazo.setSelected(true);
                        }else
                            chkEmbarazo.setSelected(false);
                        int vl = Integer.parseInt(rs.getString(19));

                        if (vl == 1) {
                            rbVisionLejanaBuena.setSelected(true);
                        } else {
                            rbVisionLejanaMala.setSelected(true);
                        }

                        int vc = Integer.parseInt(rs.getString(20));

                        if (vc == 1) {
                            rbVisionCercanaBuena.setSelected(true);
                        } else {
                            rbVisionCercanaMala.setSelected(true);
                        }

                        int vb = Integer.parseInt(rs.getString(21));

                        if (vb == 1) {
                            rbVisionBorrosaSi.setSelected(true);
                        } else {
                            rbVisionBorrosaNo.setSelected(true);
                        }

                        int foto = Integer.parseInt(rs.getString(22));

                        if (foto == 1) {
                            rbFotofobiaSi.setSelected(true);
                        } else {
                            rbFotofobiaNo.setSelected(true);
                        }
                        String parpadeo = rs.getString(23);
                        System.out.println(parpadeo + " parpadeo");

                        if (parpadeo.equals("B")) {
                            rbParpadeosBueno.setSelected(true);
                        } else if (parpadeo.equals("R")) {
                            rbParpadeosRegular.setSelected(true);
                        } else if (parpadeo.equals("M")) {
                            rbParpadeosMalo.setSelected(true);
                        }

                        String pantalleo = rs.getString(24);
                        System.out.println(pantalleo + " pantalleo");
                        if (pantalleo.equals("B")) {
                            rbPantalleoBueno.setSelected(true);
                        } else if (pantalleo.equals("R")) {
                            rbPantalleoRegular.setSelected(true);
                        } else if (pantalleo.equals("M")) {
                            rbPantalleoMalo.setSelected(true);
                        }

                        String miosis = rs.getString(25);
                        System.out.println(miosis + " miosis");

                        if (miosis.equals("B")) {
                            rbMiosisBueno.setSelected(true);
                        } else if (miosis.equals("R")) {
                            rbMiosisRegular.setSelected(true);
                        } else if (miosis.equals("M")) {
                            rbMiosisMalo.setSelected(true);
                        }
                        String agudezaVisual = rs.getString(26);
                        lblIdAgudezaVisual.setText(agudezaVisual);
                        cbLejosOD.setSelectedItem(rs.getString(27));
                        cbLejosOI.setSelectedItem(rs.getString(28));
                        cbLejosAO.setSelectedItem(rs.getString(29));

                        cbAgujeroOD.setSelectedItem(rs.getString(30));
                        cbAgujeroOI.setSelectedItem(rs.getString(31));
                        cbAgujeroAO.setSelectedItem(rs.getString(32));

                        cbRXAnteriorOD.setSelectedItem(rs.getString(33));
                        cbRXAnteriorOI.setSelectedItem(rs.getString(34));
                        cbRXAnteriorAO.setSelectedItem(rs.getString(35));

                        cbAVRXAnteriorOD.setSelectedItem(rs.getString(36));
                        cbAVRXAnteriorOI.setSelectedItem(rs.getString(37));
                        cbAVRXAnteriorAO.setSelectedItem(rs.getString(38));

                        String esferaOD = rs.getString(39);
                        txtEsferaOD.setText(esferaOD);

                        String esferaOI = rs.getString(40);
                        txtEsferaOI.setText(esferaOI);

                        String cilindroOD = rs.getString(41);
                        txtCilindroOD.setText(cilindroOD);

                        String cilindroOI = rs.getString(42);
                        txtCilindroOI.setText(cilindroOI);

                        String ejeOD = rs.getString(43);
                        txtEjeOD.setText(ejeOD);

                        String ejeOI = rs.getString(44);
                        txtEjeOI.setText(ejeOI);

                        String ADDOD = rs.getString(45);
                        txtADDOD.setText(ADDOD);

                        String ADDOI = rs.getString(46);
                        txtADDOI.setText(ADDOI);

                        String prismaOD = rs.getString(47);
                        txtPrismaOD.setText(prismaOD);

                        String prismaOI = rs.getString(48);
                        txtPrismaOI.setText(prismaOI);

                        cbPocisionOD.setSelectedItem(rs.getString(49));
                        cbPocisionOI.setSelectedItem(rs.getString(50));

//                    fecha = rs.getString(9);
//                    System.out.println("Entrada->" + fecha);
//
//                    DateFormat inputFormatter = new SimpleDateFormat("yyyy-MM-dd");
//                    java.util.Date date = null;
//
//                    try {
//                        date = inputFormatter.parse(fecha);
//                    } catch (ParseException pe) {
//                        pe.printStackTrace();
//                    }
//
//                    DateFormat outputFormatter = new SimpleDateFormat("dd/MM/yyyy");
//                    String salida = outputFormatter.format(date);
//                    System.out.println("Salida->" + salida);
//                    lblFechaCliente.setText(salida);
//                    String sexo = rs.getString(10);
//                    try {
//                        Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
//                        cbxGenero.removeAllItems();
//                        cbxGenero.addItem("SELECCIONA:");
//                        for (int i = 0; i < combo_llenar_sexo.length; i++) {
//                            cbxGenero.addItem((String) combo_llenar_sexo[i]);
//                        }
//                    } catch (Exception e) {
//                        Object[] combo_llenar_sexo = con.combox("sexo", "SEXO_NOMB");
//                        cbxGenero.removeAllItems();
//                        cbxGenero.addItem("SELECCIONA:");
//                        for (int i = 0; i < combo_llenar_sexo.length; i++) {
//                            cbxGenero.addItem((String) combo_llenar_sexo[i]);
//                        }
//                    }
//
//                    cbxGenero.setSelectedItem(sexo);
//                    txtEdad.setText(rs.getString(11));
//                    txtOcupacion.setText(rs.getString(13));
                    }
                    cn.close();
                    PaginaExamen(Integer.parseInt(lblIdPaciente.getText()),Integer.parseInt(lblExamenVisual.getText()));
                    BuscarExamen.dispose();
                    BuscarPaciente.dispose();

                } catch (SQLException ex) {
                    Logger.getLogger(Historia_clinica.class.getName()).log(Level.SEVERE, null, ex);
                    System.out.println(ex);
                    JOptionPane.showMessageDialog(null, "Error ¡No se pudo colocar la información!");
                }

            

    }
}
